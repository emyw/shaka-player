/* eslint-disable */
const EMYW_PROXY_API_KEY = "e1d060d6-fa29-11eb-9a03-0242ac130003";
const EMYW_META_HEADER_KEY = "bf3c199c2470cb477d907b1e0917c17b";

// generate something that can be used to help make a unique device netflix ESN number
const generateDeviceId = (esnLength = 30) => {
  var text = "";
  var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

  for (var i = 0; i < esnLength; i++)
    text += possible.charAt(Math.floor(Math.random() * possible.length));

  return text;
};

const arrayBufferToBase64 = arrayBuffer => btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)));

const base64ToArrayBuffer = b64 => Uint8Array.from(atob(b64), c => c.charCodeAt(0));

// eslint-disable-next-line no-bitwise
const arrayBufferToHex = byteArray => Array.prototype.map.call(byteArray, byte => (`0${(byte & 0xFF).toString(16)}`).slice(-2)).join('');

const hexToArrayBuffer = hexString => (new Uint8Array(hexString.match(/[\dA-F]{2}/gi).map(s => (parseInt(s, 16)))));

const aesEncrypt = (source) => {
  const iv = window.crypto.getRandomValues(new Uint8Array(16));
  // eslint-disable-next-line new-cap
  const aesCbc = new aesjs.ModeOfOperation.cbc(
    hexToArrayBuffer(EMYW_META_HEADER_KEY),
    iv,
  );
  const textBytes = aesjs.padding.pkcs7.pad(aesjs.utils.utf8.toBytes(source));
  const encrypted = arrayBufferToBase64(aesCbc.encrypt(textBytes));
  const hexIV = arrayBufferToHex(iv);
  return `${hexIV}${encrypted}`;
};

const aesDecrypt = (encrypted) => {
  const iv = hexToArrayBuffer(encrypted.substr(0, 32));
  // eslint-disable-next-line new-cap
  const aesCbc = new aesjs.ModeOfOperation.cbc(
    hexToArrayBuffer(EMYW_META_HEADER_KEY),
    iv,
  );
  let decryptedBytes = aesCbc.decrypt(base64ToArrayBuffer(encrypted.substr(32)));
  const padLength = decryptedBytes[decryptedBytes.length - 1];
  decryptedBytes = decryptedBytes.slice(0, decryptedBytes.length - padLength);
  const value = aesjs.utils.utf8.fromBytes(decryptedBytes);
  return value;
};

// const proxyServerRoot = "https://proxy-api.enjoymoviesyourway.com";
const proxyServerRoot = "http://localhost:4012";
// const sessionPath = `${proxyServerRoot}/session`;
const manifestPath = `${proxyServerRoot}/manifest`;
const awaitPath = `${proxyServerRoot}/await-request`;
const processPath = `${proxyServerRoot}/process-response`;
const tagsPath = `${proxyServerRoot}/enjoy-tags`;
const licensePath = `${proxyServerRoot}/license`;

let state;

const initApp = () => {
  state = initState();
  console.log('initialize shaka app');
  // Debug logs, when the default of INFO isn't enough:
  // shaka.log.setLevel(shaka.log.Level.V2);
  // Install built-in polyfills to patch browser incompatibilities.
  shaka.polyfill.installAll();

  // shaka.net.NetworkingEngine.registerScheme('lic', EnjoyLicenseScheme);

  // For Netflix we will need a deviceId
  if (!localStorage.getItem('emwy-deviceid')) localStorage.setItem('emwy-deviceid', generateDeviceId());

  // Check to see if the browser supports the basic APIs Shaka needs.
  if (shaka.Player.isBrowserSupported()) {
    // Everything looks good!
    initPlayer();
  } else {
    // This browser does not have the minimum set of APIs we need.
    console.error('Browser not supported!');
  }
}

const initState = (initial) => {
  return (initial ? null : JSON.parse(localStorage.getItem('test-shaka-state') || null)) || {
    providers: {
      DISNEYPLUS: {
        tokens: {
          accessToken: "eyJ6aXAiOiJERUYiLCJraWQiOiJ0Vy10M2ZQUTJEN2Q0YlBWTU1rSkd4dkJlZ0ZXQkdXek5KcFFtOGRJMWYwIiwiY3R5IjoiSldUIiwiZW5jIjoiQzIwUCIsImFsZyI6ImRpciJ9..JTgHJhAF4cuKAD6P.N-c70cB4skGeQK4xBnqcHgjLs2pvidZOdhHV6p8QVQl53jrw286J9rIjo0AsH6x86ej2eq2EOPllQqphrgm7EMjeYC6Ck_tUPoaA3dR8FEDIYcRkAkd0VS3PAuSCKTRG3Duao2ruGvrObmZLN-kpfiDpVUm5MgURhtFfYGuzoNDR4zPmfHAP8U5OL-0JC7d2_T2dAMn4NWtCRB6EQKIXz5hkOiog4cCfQIu8-WSjayr2mftYDDvCIpSpk3zpPJ-D3w2sDvyOLsfMthHUsOfvyYZsVzSJ39jS8L3VMIgVUaQ4gIEVXzn2I5wn2wpFLzodeshsgVjEOmU6Sx6Ct6voOr-moI_W-JIq9GQHoAyLJZ0SRioCymvx01AO9J9MwyORIlEc6u9MNE65x8Q_zaCz3wDHIZXoPmdnD7M23Sliealq9J5WIPiW2HqtOOt1YFovbEkIGJvd7gFxQLDpi9rXSOc0twvtxXpblrH_g6SmGaKbbNZM8dAz29VdKLIMQfELqOuCsH8RvXlTcwd488cikV60VktP-PV-MZihylRD8WKXxHVI2zM_h4lZgId_k_2K1f33RxQidMoRh1mhY1vlYVBblmN7geoJvqO55febhp7sbPOgGNLAcAB3nP2wz2XrcBgGFP2LyBC6upHvC7j0RVcNC3sZu41peAwYwbJQH0akNiaF9b_4Rw5e92sQzmDMq5pWQpYrfa4umL0_3vU1pzcaIVKS_znMLen4ZayJM7Fjp1P-8q4AjUxukKvXLQ0PcSeSGyd_5XLpiiGKC34Vz5m7V3GdEwuFgeV0iMaa3eZJisvI2Z3JvodDdAlieBCM9WwOhm6D_iycfA3vQ0f3wXMyoJooLwcGgw7EV44Ofb7snooRpX4-ojTZr5CcA_LXUjwSEia36ZgjhGS7rzgVDUNbYi9m8zS6A3mmPraef56M7KfwybWXHIQ6VgT3Bzi1zYFKQ9uwdiCWxwoGYKUkruaog5hYwP8iTEGBG8LEDgTQL3_5zg5a9z7UkhDpgP1RrV5fLyJ52Zw0wKgvVojHPltRpzNpW6L_YexVWbC7ovfdEM7ReVtryjDZNDpgC7vkg5JtooTEJ4DnQ4StwRdqMDpRjAUxokCsoS1RHDbnIePz6iDapvyFs9ggam_nj2MvPO9WPEMvin92oSqH8QFBas4wLoPcOJg0AND0xddQX2Ic9lNM4pXEp8XbE3w2asIMpTSDOF6o0RbWwxOCiyV72zNVauNsGaEyF69PHOBQ8RTZ83MlXtB4J_zkcVlNiinzRQtoshgw-JhgKvLlpO4lZSWig3zUd81AdKwwsb65PMeJ3mZmEAvASs341QZvDBF1aMFAYrmpqpzxCGRxNre5ptdhiDo7sv92xxg_-95tdmd1C3XmXiptHgk7ryhf2aF7IJfX1aqczwpTAdrGFbDrj4FszIUQjv3s2HwURaF7hh-KMXwqEZ-1sQy5hmCVyXDxc3LZlqAu99lKwUXeLCzosUASRSnv5piLWtx8DISee77uJuyYD6foc38j_IDxGxm7uKlAVInwpj7ksfNFa3Gn8syDkIxZE67r9E4NzTpB4fwdViYPAV0HF9LyGTcAt9C0gw9PQzlBsj4iiTkOIpYv7gO_Eu0omUjafAOri8OXEMVBUNhqiU-xLDq5hFaG3utGI7wASV7PIa-CFZHfwvMVaXmnDL5eoE49g5C7MDtsed5mLs8FkNeTj1JPU0fnmPYCX4UtJnvFrQdUqvtaqAAudqxkKyuudy0HJDnyfzonKqghYZh_et1qiXjQ7fJ9k2vn2ZoMz9VQciwTvMvakxyCJ7y8jn4zNh2v1HwKJlgRcGhvzsJk0p5OQ__kWvc6vUV36ceSzeIpWiA53Oqvokgu0sdgsV6-hY78EPXAuHdk1EdAOuBIhPVcXGbmUJGpGIvQBz-Gp4-2dxmzdXWs5-RcsQg2KJdjtCSzsxpkZHeX_Leaqxk_r9YRG8PcZIGstZOrwCRdRbL0D_Xe5IXJo1Ir-RyyJTAcYSvVxAGS_P5roQviAO31mjifHglRGrAHj2RczlyGMOjh-0Y9VqpL-zemihH-B4H8ZhzpSgRjD9as-OCRFNkIpmWbbfOs5VD7h71SbeIkGkZBDYM6_TanbvLnd8e3DFokkAluRKUjpema6YB2RPVl3aY72GLoySeQQ8HUppDsx0X0fk8PwSonwA4A2XRD5J2rrWajKa_B2PPT-df_6Wwdms1UncDjOurIUpR8oZbgjNwL1UDS4vu6NWrvX1_GacAi0JV5ULgcHAAHuOYCkr9SUsmceXvAYtfeKHUIb_-Bdx7imvuTl72i_hF2DLHGDjAkB3JJkNZ0QU_6V4qLPlYlm5Ji1xO8RbIfs8JZO9zkAPRukSA2AXIXrMfb0sGNdOZtpbOBn5brI_A5JkwAChJe5RFnVas0mv4qiXBGCJJbN6gHM8k1dNK7NlPEuVHAiIMZq8ZyP471QDpWLwvgDqIdO0sq0jI2GWrfnh_tLWPMPBPeyhOGI_5FYqRISHpbHiDTr96N3xtQRHVUp8OzzpuEopKMwUC8WpYpVJnRfWYtmnQ5f4GI1JkRYb-ITk-G0iM81wD6J1hOP9sH0C6GZ9ssce6vTobZpaQ7zQ8O18fIsChCHP-VYFPaPpAsZ8i-Z7lCD5Lifcn-8aYYenBNfLmmWF5lmuD3pD5VAB7RZIgPK-MPV6x_IrJNwFEyrPTUiAx-FtCi5yV7YTB1D7kvwnkQ0V_SYN0ARE0oHkhxfzEBBtT4ZgALrr6ozAfCK8pZ1Rhu9Hp7IXJpIQjKBuwQ93QJwt9US9GwKKoICM5ivfJqGG0NorQYeKCz0LeZsrYEWPkgaZDEgmU5pzsd5OeWIaftldzBZp9WjqEhxBoIjFsE6-31FecUP_X2yir89-ASkdXd5IBtydAQejk5wBkvjU1joh1MiZ8JS9iScnAN5_AvfVNvpH55lBGQESe3KWTlp6h45BGh7MhT2R_oPbvoO5aD7b7xfAb1t-PW6vFYKwnD5Ay915YlExf8MrTrw1hMjPiHyIvRPkU_8qR_bPhwwI2cPb_dr4v72_DFJirfdXCEw1zeIyuh_KudZXhjoYapemSWXUHNlFM-bHbNQxYOtfaGSorueQT3FhzmKD8pcTMC6aQvMqZLVLnW8p6VqYnfMMI7sWzTKd_k7dnSWUoWyjfz03iyEEkw3GYdouZIcAMlL_FI9QUUqVcbpmZ4RUJtLYLuKflI2H9U6MU1iLOCI3JKIhdODYoEjI7ILeq1YAF6yqu_4CQ5rHEqSOfafxiLUtXNs2EI4hF6WnQ.YntuvMuKXFa8VWiDl53rZQ",
          refreshToken: "eyJ6aXAiOiJERUYiLCJraWQiOiJLcTYtNW1Ia3BxOXdzLUtsSUUyaGJHYkRIZFduRjU3UjZHY1h6aFlvZi04IiwiY3R5IjoiSldUIiwiZW5jIjoiQzIwUCIsImFsZyI6ImRpciJ9..EXPBupBtBR8fB1Yd.p_AHyGgOE7Unel5gigTbyBeUikEjm1ND6R-MvQAhnilCxFPqIaOT9d-vSVK9T2Y7xbvMsTTi56dcMwKiNc9uXPiJKVoZYPQ_w6rPuV1vKNOpSsWiXIiPYxHynHg0JJ7bY7O2UT9QB7RQelnEPqwsC8rJkj38zo7vCUyeqZsO0GiNOgmRGqYCzLUVk13v1reN0VzWyks7Mt6GiA-Z4V6C6zVOaFTToMqxYzv0Xc8vNtPgmEvpg8X7J-N9gPo9hJIiul97wNrWoOBKjNFeDV3Q5WGSY1c3jVMGPYeD7TLDQslCoOTR6QSrIJdIJldngyyDJunr7X3zxC36ZHp2HUZ1uaIjhsmmo55HECCcUJ-lZ7fBj9SyPxiVzP_vPqsfO7yzkmnNN4wXuJn6F4Gssg6c0OjdQk9eubixl_JKu9FC0Axvxl_l1DZUzuJbVEKsF8nax6V1KohIePQHaFDv2Bo8M6BGu5WJIlL14ymAA_oktKUgfDh56MMrP6ICu-jWSmqkJ0hL_1iyUyr4aFWE1CIeve-biyvZB2Ye2pmTwGu48YczM7ajfRTfZ7_VTsw0JpkWkV13W36hGso4jKNnDvJwLKU2fEv1exzu7SfPsn0fVzk71io1XMG34FDfuMCYO8QdjJdPvETsJjjyOCITkGpW1jnhPJ3TOBrkciJee3hpURvZO6LhMI-b1RcoVRDnxO4hLGP5RLbIjaA0lMi5LGq24LOOGzXUHAFpeJvPlJo5x-GixHt9njL1sTreqiVX95G5G6puu4ptFrObIHa9j8PysZBI54tvjB0RPYtNB3lEq_dYUPVqvAqMdJKVQim0HXoJns2GIoXFkBNyfukYFZoTPXLaoD6YLV8l476mIIvP-MH4Lr3P67kf6j-kdk_nmqL-EcYnkZwVojUzbLlGRmP4NRQDi1efGKOBObc2e5Yo2DMi6FyWsvP9c3nXxmEhlaPwBkeFawpOj7AdV3Se5qRb1og0l4xWZtZ85VQL1Habcu74c8D54Y23OGbNNIlweflKLvldgfhJsM1VMagcxV0h33L1SQa0fweMJXf39Iq-8TOJGQASXgzuzAf_9SJqtUoM6X7wu5Y8BgDunF0sN7yedBRg1Id4oo53SNSw1-8QGaEr0OTUKH2MWRGn7FvMnYCwPG2orEtkxdk1-JAnJoZmY6ChfYQFHfci3r5hEz2a31dCnf7R_tDTZ45S0nSknakqGz3TDjqUrz6M0zex8Bjqb45fPtGsqr2PncwiJ14odoQQ2Pji_gNlbWMF-yOiEU0S18cgVPFHT7TbjmxLqRbsr3NwrcSzMLY7d62awyO9_Re2tAfluyqP3iclYkdReGSZKE-9BCIiS11IJWR4nuUSfbSP97mU4JxIYer9eHbmt8CmqkTUMULkPotuOpq9Z5vZ2EOEnrBb9QyJrw2i__ZBV3J9lsgi-ESjDjFIDGM4K0rpm8_W31CWodrq720mI8OYLQ88ytXdfq6AwCk_VbqDbRFZi-Ka5UL0dMvIipy8l86V-euUhEZ2LMcLwByJcg_TDwdsQ68sr67AmoWyTMWfS_bGeG0ZO2RUcIKzkU_M7TX6rEG-cPAu3zYqC7TPrxVmEFwmv03ikmVoqwuo3UJMiFzeEGUz0Rgkj1vvuLLeXebJsfGggJxWjf5tYwNJ6CAT9-KAkvnLfTCgbvWmX0ZRMkGL_AfceEf6PO_P0XvZi7yxJekVhdbsGexV-8K2wmyI6YJKvypiLqZ2Ck4bpk1wa9uBxpEVgjsbwginC82OMX3gQdJGs2CJITajU9nhp25GVHsS06pQN9YewxYZ2oYMUy3by3CP01R1LpeIVGYj0xIIOMkD7Q8Hn9D_PiN9BjREUokv_Kaj219X_EF8CcyUo27eklUL8VLBDNdVreBCBTjUgUH7gAknhUM-m3b_EIZS8vtiisorZHVJ9x-9pfAimnYX27nLoeElfULeDC3xYqUFlXE3JTUgecdYOtY3ROjh5HR0PyfXW58FH_FFYtKKrwYhj1XPdfCnkDRgZQJ8Y1R5pj2Kg_ru5CfWwpN1dYVMDKzvCwRH2i4YLrgQG8WBCqOcbn5n3Ayzy5lPbwGmH19u3S4CsMycT9Poq2f5kJ8wMGPHi0eW9zK7vaOWtSSnfajWRPGS9AwfayLoPxsMDpwHzwD1tApj2hJOyo3d85G13nIjV9R8X05PrHDVHXbGJDxYTT1gvVSZvYtvMMxAnrJV7SmuvXtEn07jRp2Sg0E9Tpk8FnGOoxFYjNG5Vqo28nNA2ZPe1bUCCNqIIH-FJtFm5q-66dhrvB5MYBKYQYzIYzvzUkNcXOmJF333wBuedy65K_-fjLYQE2bdjjBYA7VnwHZfmxGYNziDykCCNTBUKgwk_-0ThvsSeSkNi7rzIFREnEU2YJTh0JZsDG-FO7rpOgE4ShP4b9Y9OjDjlT6d5jQ62HTLybi8X1dS819iUSkITpfT7nA_4lx-eJNod5jvaLgDi06MgD6RyyhoZyDCSpP5s3prMd9wBr6ZS1qmYArYkGlA0we6G2Sxt_EXVGZO3otQa-z4mjTFYpEn2QPnWQJMkkUURuZo5qZLKml7rvFLfR1fhNMGUBd6IForYEHxYrVnzm4QRcMBcngy-Z7bW3Joqn7H5oewaHxnQqi2spqBKGuhMjxR3lxCcNm0eo-5O1l4BbXLwn3lo0bwrfOUCXBtJ4hMjNWPm6bdaq9A0njsO7pTuyP5crSrQvR7UbkpvjAVjk6SoBXsL7H-RCn5OF4VautQwIFlYGR5NS1_3Y4mY8TOzx3K0CE_eA6Mu0DUZytuh4lLcQjJdwmF_zny40csioSuhsfGkdzWH5MWMon55cWqlkeju9qyT_zXyQYyC-X2gHCea7jiTs6QzbA0LOOOKwhOfN-bkCV2Y0RVm9IH6hh9p_ShXqsCvfBH6g23A0b0QCkdMOjIwB_T_-7OMzCUWmLpd41REZJAi_HJPTbs5iL_yCeTCCq1RtLs5Q-Sqi4lnIp7ThPlzAYQjCbAjjZhepzPsg38Jxd0so3Oz5DuWnw46tsgwwotUbBJ3KUIS2WE8bW-AOnuNMWYXGxST5hpP17ysUFbqE0xA3ytXESQ-7tt4ExumnRvoloCv78oqqZo_ri_p_uYaaqCoocoy93kgUrWG-BoTPUAKWnRTAW-RLIbfl14YsB9kitwO12uqI0TAKJ7gPCLB1idZCURQ9OUYeBIGC0UN5Klrk9q7S3nwnL7-L3pX40JhDmJG_E6NcW8tIS0K8ywRQ_x85TtLRImnjY6McqnZAUu08mGunkMIscXX2YGmfMhIZXOrnJkAfaI6TTW-YMpfh3G7igCEQFiAbrnCZWIf9hyMnI0JK04NSeMrksrv44d1fpJRTexyWcpztoj1pjyKhrxH0veMfSVFkoCliN8kmmftYJaU8z3T5Si1M407p7ycEHcEBAlL508bVsrczPpcsKX_iPGOtvT2oSebTVpIpm3UCAFaxAx92VCbIsAJB09-oWBtvGKxmsQEqQ8u0RGoEc3h3DfdTihL5zhSMW2wVn2OVhyGjxknXZu9zc4oVzMSHwoH1qod24YE6C3.ftKl6NEl_WpCb717IL4bYw",
          expiresAt: 1630119804620,
        },
      },
      HBOMAX: {
        tokens: {
          accessToken: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0aW1lc3RhbXAiOjE2MzEzMTY3MDk5NTksImV4cGlyYXRpb24iOjE2MzEzMzExMDk5NTksInBheWxvYWQiOnsiaGlzdG9yaWNhbE1ldGFkYXRhIjp7Im9yaWdpbmFsSXNzdWVkVGltZXN0YW1wIjoxNjMxMzE2NzA5OTU5LCJvcmlnaW5hbEdyYW50VHlwZSI6InVzZXJfcmVmcmVzaF9wcm9maWxlIiwib3JpZ2luYWxWZXJzaW9uIjoyfSwiZXhwaXJhdGlvbk1ldGFkYXRhIjp7ImF1dGh6VGltZW91dE1zIjoxNDQwMDAwMCwiYXV0aG5UaW1lb3V0TXMiOjMxMTA0MDAwMDAwLCJhdXRoekV4cGlyYXRpb25VdGMiOjE2MzEzMzExMDk5NTksImF1dGhuRXhwaXJhdGlvblV0YyI6MTY2MjQyMDcwOTk1OX0sInRva2VuUHJvcGVydHlEYXRhIjp7ImNsaWVudElkIjoiNTg1YjAyYzgtZGJlMS00MzJmLWIxYmItMTFjZjY3MGZiZWIwIiwiZGV2aWNlU2VyaWFsTnVtYmVyIjoiNDFiZTFlNzYtZWM1Ni00MjA4LThiN2MtMTcyYWNhMzU5YjYyIiwicGVybWlzc2lvbnMiOls1LDQsNyw4LDIsMV0sImNvdW50cnlDb2RlIjoiVVMiLCJwbGF0Zm9ybVRlbmFudENvZGUiOiJoYm9EaXJlY3QiLCJwcm9kdWN0Q29kZSI6Imhib01heCIsImRldmljZUNvZGUiOiJkZXNrdG9wIiwicGxhdGZvcm1UeXBlIjoiZGVza3RvcCIsInNlcnZpY2VDb2RlIjoiSEJPX01BWCIsImNsaWVudERldmljZURhdGEiOnsicGF5bWVudFByb3ZpZGVyQ29kZSI6ImJsYWNrbWFya2V0In0sImFjY291bnRQcm92aWRlckNvZGUiOiJodXJsZXkiLCJ1c2VySWQiOiI2NjBkZWViOS1hYjhiLTRlZTAtYmRiYy0wZDljNWM3MDU3OWEiLCJodXJsZXlBY2NvdW50SWQiOiI2NjBkZWViOS1hYjhiLTRlZTAtYmRiYy0wZDljNWM3MDU3OWEiLCJodXJsZXlQcm9maWxlSWQiOiI2NjBkZWViOS1hYjhiLTRlZTAtYmRiYy0wZDljNWM3MDU3OWEiLCJwYXJlbnRhbENvbnRyb2xzIjp7Im1vdmllIjoiTkMtMTciLCJ0diI6IlRWLU1BIiwicmF0aW5ncyI6eyJNT1ZJRSI6MjEsIlRWIjoyMX19LCJzdHJlYW1UcmFja2luZ0lkIjoiNjYwZGVlYjktYWI4Yi00ZWUwLWJkYmMtMGQ5YzVjNzA1NzlhIiwicmVxdWlyZXNBc3NldEF1dGh6IjpmYWxzZSwiYWZmaWxpYXRlQ29kZSI6Imhib19tYXhfb3R0IiwiaG9tZVNlcnZpY2VzUGFydGl0aW9uIjoidXMifSwiY3VycmVudE1ldGFkYXRhIjp7ImVudmlyb25tZW50IjoicHJvZHVjdGlvbiIsIm1hcmtldCI6InVzIiwidmVyc2lvbiI6Miwibm9uY2UiOiI4MGQ5NjIwYy0xMzc5LTQyY2MtODg5MC0xNzM1ZGMxYmM1MzEiLCJpc3N1ZWRUaW1lc3RhbXAiOjE2MzEzMTY3MDk5NTl9LCJwZXJtaXNzaW9ucyI6WzUsNCw3LDgsMiwxXSwidG9rZW5fdHlwZSI6ImFjY2VzcyIsImVudmlyb25tZW50IjoicHJvZHVjdGlvbiIsIm1hcmtldCI6InVzIiwidmVyc2lvbiI6Mn19.03UHosXjMld5pooQqXA5tvW3q89v14kxa68yiON_i7A",
          refreshToken: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0aW1lc3RhbXAiOjE2MzEzMTY3MDk5NTksImV4cGlyYXRpb24iOjE2MzEzMzExMDk5NTksInBheWxvYWQiOnsiaGlzdG9yaWNhbE1ldGFkYXRhIjp7Im9yaWdpbmFsSXNzdWVkVGltZXN0YW1wIjoxNjMxMzE2NzA5OTU5LCJvcmlnaW5hbEdyYW50VHlwZSI6InVzZXJfcmVmcmVzaF9wcm9maWxlIiwib3JpZ2luYWxWZXJzaW9uIjoyfSwiZXhwaXJhdGlvbk1ldGFkYXRhIjp7ImF1dGh6VGltZW91dE1zIjoxNDQwMDAwMCwiYXV0aG5UaW1lb3V0TXMiOjMxMTA0MDAwMDAwLCJhdXRoekV4cGlyYXRpb25VdGMiOjE2MzEzMzExMDk5NTksImF1dGhuRXhwaXJhdGlvblV0YyI6MTY2MjQyMDcwOTk1OX0sInRva2VuUHJvcGVydHlEYXRhIjp7ImNsaWVudElkIjoiNTg1YjAyYzgtZGJlMS00MzJmLWIxYmItMTFjZjY3MGZiZWIwIiwiZGV2aWNlU2VyaWFsTnVtYmVyIjoiNDFiZTFlNzYtZWM1Ni00MjA4LThiN2MtMTcyYWNhMzU5YjYyIiwicGVybWlzc2lvbnMiOls1LDQsNyw4LDIsMV0sImNvdW50cnlDb2RlIjoiVVMiLCJwbGF0Zm9ybVRlbmFudENvZGUiOiJoYm9EaXJlY3QiLCJwcm9kdWN0Q29kZSI6Imhib01heCIsImRldmljZUNvZGUiOiJkZXNrdG9wIiwicGxhdGZvcm1UeXBlIjoiZGVza3RvcCIsInNlcnZpY2VDb2RlIjoiSEJPX01BWCIsImNsaWVudERldmljZURhdGEiOnsicGF5bWVudFByb3ZpZGVyQ29kZSI6ImJsYWNrbWFya2V0In0sImFjY291bnRQcm92aWRlckNvZGUiOiJodXJsZXkiLCJ1c2VySWQiOiI2NjBkZWViOS1hYjhiLTRlZTAtYmRiYy0wZDljNWM3MDU3OWEiLCJodXJsZXlBY2NvdW50SWQiOiI2NjBkZWViOS1hYjhiLTRlZTAtYmRiYy0wZDljNWM3MDU3OWEiLCJodXJsZXlQcm9maWxlSWQiOiI2NjBkZWViOS1hYjhiLTRlZTAtYmRiYy0wZDljNWM3MDU3OWEiLCJwYXJlbnRhbENvbnRyb2xzIjp7Im1vdmllIjoiTkMtMTciLCJ0diI6IlRWLU1BIiwicmF0aW5ncyI6eyJNT1ZJRSI6MjEsIlRWIjoyMX19LCJzdHJlYW1UcmFja2luZ0lkIjoiNjYwZGVlYjktYWI4Yi00ZWUwLWJkYmMtMGQ5YzVjNzA1NzlhIiwicmVxdWlyZXNBc3NldEF1dGh6IjpmYWxzZSwiYWZmaWxpYXRlQ29kZSI6Imhib19tYXhfb3R0IiwiaG9tZVNlcnZpY2VzUGFydGl0aW9uIjoidXMifSwiY3VycmVudE1ldGFkYXRhIjp7ImVudmlyb25tZW50IjoicHJvZHVjdGlvbiIsIm1hcmtldCI6InVzIiwidmVyc2lvbiI6Miwibm9uY2UiOiI4MGQ5NjIwYy0xMzc5LTQyY2MtODg5MC0xNzM1ZGMxYmM1MzEiLCJpc3N1ZWRUaW1lc3RhbXAiOjE2MzEzMTY3MDk5NTl9LCJwZXJtaXNzaW9ucyI6WzUsNCw3LDgsMiwxXSwidG9rZW5fdHlwZSI6ImFjY2VzcyIsImVudmlyb25tZW50IjoicHJvZHVjdGlvbiIsIm1hcmtldCI6InVzIiwidmVyc2lvbiI6Mn19.03UHosXjMld5pooQqXA5tvW3q89v14kxa68yiON_i7A",
          expiresAt: 1630383042789,
        },
      },
      HULU: {
        tokens: {
          // no ads
          // cookies: "_h_csrf_id=33cf019eb08785c78310bc262b609e000ee8dc85c39616c51a024b562565226e; _hulu_assignments=eyJ2MSI6W119; __utmc=155684772; __utmz=155684772.1632774102.1.1.utmcsr=enjoymoviesyourway.com|utmccn=(referral)|utmcmd=referral|utmcct=/; __utma=155684772.1938250556.1632774102.1632774102.1632774102.1; stc115168=tsa:0:20210927205142|env:1%7C20211028202142%7C20210927205142%7C1%7C1047149:20220927202142|uid:1632774102057.864315210.1289454.115168.1775495301.:20220927202142|srchist:1047149%3A1%3A20211028202142:20220927202142; _ga=GA1.2.1938250556.1632774102; _gcl_au=1.1.664325636.1632774102; _scid=a20add85-d54a-4b5c-9d30-d53a8313e942; JSESSIONID=node07uuumxetetvh1h7ygo7vtw0y48911040.node0; _sctr=1|1632726000000; _hulu_uid=46639262; _hulu_e_id=3iGI8ZsdtvYXk39Jt06QDA; _hulu_bluekai_hashed_uid=925bd28da16179d7364d20b52738577a; _hulu_dt=BzMImKi3d9P3Qyo8IAfi8rdSJJ4-zP9FIPsNLrZwhgK_Uc%2FARQ--sBDZWXo_g6210czW_NtcYxxsCZ2kY2ZAAEKzdvBQG1polXXQBtbeEZCjyUyXjZosZazGg410KMTLgG8KjMnk1JPlARemuqyvV8X8n_%2FZ48DU2cjr3Z9UEvHe9bymIt5OTpebjP2g%2FnmOqHXT8Q3OcKx4PXZDepLM6MU10tOwN952T1GE%2FclcLqic4tFeQ1hMfXC_U0nK2UWvVU6jkPDyLUu1_VlLJ3BnUGmf_nRkLHnXm6_PjTWAkbeFP_f%2FtLqg9v8chIsanCLFv8Au1F8GhWWLNjoglQlT4G_iV_UIpn3cqMTQO8f6_EUPql5ogTDb11FDSh7ZnuuSDa2Oo_RZ9CokLSelcrUUBga5syVIE5%2FnuEGqqYwCX8Iid1zpYt8OifHJYU2W%2FLQRSkTsfjly%2FY%2FN7M8U3pDR72WFUVx%2FyFOML%2FRkh3AvvJKt2pSq34vvDXpwDxlZ1xqAegX_TmctL0DEpaWqxYoOWzJyrknUeWDAgwT1dSPi3cafKr2arvstQgFcLLnUkTY2Wof7u3S5fURzD102GciYsyjMACGnDa11n%2Fv1kodSHvID72YBJR5wadjtivikhKa%2FiLSvhXa0c0JhD%2FTVu3SkXzbUf2eBlAW0bURzhtD6W2kerxX5OXsMsAMeRuQajNYy2HHr5OrCKhqfdX2POiHrac7TRDDBEz6X0yrPGXIdYSnT3k7rM75wqzMPpnQUcB8y38l5EF1HdjRVtbOcT4PDPIydQM%2F7g0jeSgu7WDggz_iR%2FoqzU7NmD%2FR6gY61HmuOKNDzJEm0gQa%2FFZumWx4njwWAEsKEJLXhh1aAmK1u9Cgk5vgbUP4nhsPY%2FH%2F_SrIz5oqAZhxNH3NCm0MnyNIsZI6ciSazgCw-; _gid=GA1.2.1896733256.1632869755; cp_enjoy__tcv=eyJuYW1lIjoiX3RjdiIsInZhbHVlIjoiYjlhM2UxMTRkNzBmZTRiZDk4NDZhYTkzNmY3NzFhMDRmNzU5NWMyNmE0YWYwZDgwNWEzNWIzZmM4Mjk4MzBmNSIsInBhdGgiOiIvIiwiZXhwaXJlcyI6IjIwMjQtMDktMjhUMjI6NTY6MjAuMDAwWiIsImRvbWFpbiI6Ii5odWx1LmNvbSJ9; _hulu_pid=46639262; _hulu_pname=Chad; _hulu_is_p_kids=0; _hulu_pprotect=1632869786994; guid=99DBB037FBAD4F85B2069CF1694B9BDD; AMCVS_0A19F13A598372E90A495D62%40AdobeOrg=1; _persisted_HEM=fe4dfe6180784b1e13e694d04c9eda4c32361f2a16d29068d6c8790eaac7d338; s_cc=true; _hulu_plid=1886389224; _hulu_hbc=1632871941391; _csrf_id=44ff25a02852759e4dbf6af21510e0001839bc50e6e1a4041a088954086f6e04; cp_enjoy__csrf_id=eyJuYW1lIjoiX2NzcmZfaWQiLCJ2YWx1ZSI6IjQ0ZmYyNWEwMjg1Mjc1OWU0ZGJmNmFmMjE1MTBlMDAwMTgzOWJjNTBlNmUxYTQwNDFhMDg4OTU0MDg2ZjZlMDQiLCJwYXRoIjoiLyIsImV4cGlyZXMiOiIyMDI0LTA5LTI3VDIzOjMyOjE3LjAwMFoiLCJkb21haW4iOiIuaHVsdS5jb20ifQ%3D%3D; cp_enjoy__hulu_plid=eyJuYW1lIjoiX2h1bHVfcGxpZCIsInZhbHVlIjoiMTg4NjM4OTIyNCIsInBhdGgiOiIvIiwiZXhwaXJlcyI6IjIwMjQtMDktMjdUMjM6MzI6MTcuMDAwWiIsImRvbWFpbiI6Ii5odWx1LmNvbSJ9; bm_mi=F7254971A0F3A601842C29683FD760B2~IsON1ctJLKMJENrBwpl1vLV2ENgmT3s7Jhj9TleUdbH0dEtD49QzxSLjH3dH+1DUDwdly35zK+rab9liXvF1xf954AWUaniRVC7Nf8lBHFROvH87XNizuT4DLuyN6VIHacEAHHAnuU4fAGO9q9gsgGmRUm9KclBOht4NGdq66QJC1rpK5KxXb7OUXOusEjF6yMBAMpx/n/N/rAvTMnqkbw==; cp_enjoy_bm_mi=eyJuYW1lIjoiYm1fbWkiLCJ2YWx1ZSI6IkY3MjU0OTcxQTBGM0E2MDE4NDJDMjk2ODNGRDc2MEIyfklzT04xY3RKTEtNSkVOckJ3cGwxdkxWMkVOZ21UM3M3SmhqOVRsZVVkYkgwZEV0RDQ5UXp4U0xqSDNkSCsxRFVEd2RseTM1eksrcmFiOWxpWHZGMXhmOTU0QVdVYW5pUlZDN05mOGxCSEZST3ZIODdYTml6dVQ0REx1eU42VklIYWNFQUhIQW51VTRmQUdPOXE5Z3NnR21SVW05S2NsQk9odDROR2RxNjZRSkMxcnBLNUt4WGI3T1VYT3VzRWpGNnlNQkFNcHgvbi9OL3JBdlRNbnFrYnc9PSIsImRvbWFpbiI6Ii5odWx1LmNvbSIsInBhdGgiOiIvIiwibWF4QWdlIjo3MTk5LCJodHRwT25seSI6dHJ1ZX0%3D; XSRF-TOKEN=bcc0b166-af6c-459e-bd13-5e235525ef4a; _hulu_session=iQGdfjT9fhz%2F_8Uv7Q3Pnmk6OH8-0BWeZWBpuM0momAw4K_pbQ--BTRw1WChnEefGEmLKazxOtwIHO%2FI3lGRt0FBLWa_12NMxzOtX0tVsehyl8HCnBh7ekiWTJR5sVobSstAr0CNyQPera86q8WkEs57XSvhYMR9m9gGpYExSfYWv3A3_xrzHyz%2F_pHCzdocT42fJRngkj6bXk4oxDR01BEq4JRaRyRtWQHeh%2FwLK7JlF80ceHUokLyvTX2a4a8CLKC2mIE3iSO2NSbdJ7hA3uRnP%2FH9joNQZbMK16oWxm2_BAh945gFDJ0BEcftCTWFgqHsyKIGyF8xajIoiN9pfxhfie_fihXOHcRhzoq_b82GAEJtDfX7myE3t1ZPTR0uDUtY23MhawzmsJWQ6lzptg73gyBdyV6gnG87HBHZ1e0GwIui_NEmgnN2LsupG8PqAKULLtIhJQt2CUcEnXyVqJy8FIve%2FbbdZ2Xa5dRrrA9DO5iCAC%2FjSMqzH%2F%2Fjv3TKR6On4RruDri9L7J%2Fo%2FQuCVLWffq7DZdq5Ga5uiLQivDpNBR0n1mG0qMcTQqD05_VYNnOtU%2FggwYXBBVgA0rI7xlu0RkF1dJslkYgXuX2htTqyGuwgY8MIck6hoR8qHs9n4cPXA6x4wS31XJ%2FMI0vxv03A0YWzQsDcI5DfjHH8uZVvk5Ks4H7mbqCvXXIPC7AfIXy1CjdNHkR8TFpKCo7vGbUycngLAlbONs3fjF%2F1VHn_bNfNxgzSViw4KW%2F22_yVPLpSMjyxi280RzqKop1Dw7lQAVKBuXF9oqbyw__IYtgywleWIarU9yMAUMCFIQ9vF2s%2FZkTTseu6_NJIp5W1wbh4CLp6uoaZYJvdF5pfxhvfMta8cwOHxdzFb7Suujrc_4SnU_YgjTtl77v7aBmBuOezu%2F%2FZJuqkBIUf7ZpwxWewyneoAccILSbMOK9bLYR5j499yZWZZBCz4sq9MAGy4kHc6k0hyw-; _hulu_pgid=394747907; cp_enjoy__hulu_pgid=eyJuYW1lIjoiX2h1bHVfcGdpZCIsInZhbHVlIjoiMzk0NzQ3OTA3IiwicGF0aCI6Ii8iLCJkb21haW4iOiIuaHVsdS5jb20iLCJleHBpcmVzIjoiMjAyNC0wOS0yOFQxMTozOTozMS4wMDBaIiwibWF4QWdlIjo5NDYwODAwMCwic2VjdXJlIjp0cnVlfQ%3D%3D; cp_enjoy__hulu_assignments=eyJuYW1lIjoiX2h1bHVfYXNzaWdubWVudHMiLCJ2YWx1ZSI6ImV5SjJNU0k2VzExOSIsInBhdGgiOiIvIiwiZG9tYWluIjoiLmh1bHUuY29tIiwiZXhwaXJlcyI6IjIwMjQtMDktMjhUMTE6Mzk6MzEuMDAwWiIsIm1heEFnZSI6OTQ2MDgwMDAsInNlY3VyZSI6dHJ1ZX0%3D; cp_enjoy__hulu_session=eyJuYW1lIjoiX2h1bHVfc2Vzc2lvbiIsInZhbHVlIjoiaVFHZGZqVDlmaHovXzhVdjdRM1BubWs2T0g4LTBCV2VaV0JwdU0wbW9tQXc0S19wYlEtLUJUUncxV0NobkVlZkdFbUxLYXp4T3R3SUhPL0kzbEdSdDBGQkxXYV8xMk5NeHpPdFgwdFZzZWh5bDhIQ25CaDdla2lXVEpSNXNWb2JTc3RBcjBDTnlRUGVyYTg2cThXa0VzNTdYU3ZoWU1SOW05Z0dwWUV4U2ZZV3YzQTNfeHJ6SHl6L19wSEN6ZG9jVDQyZkpSbmdrajZiWGs0b3hEUjAxQkVxNEpSYVJ5UnRXUUhlaC93TEs3SmxGODBjZUhVb2tMeXZUWDJhNGE4Q0xLQzJtSUUzaVNPMk5TYmRKN2hBM3VSblAvSDlqb05RWmJNSzE2b1d4bTJfQkFoOTQ1Z0ZESjBCRWNmdENUV0ZncUhzeUtJR3lGOHhhaklvaU45cGZ4aGZpZV9maWhYT0hjUmh6b3FfYjgyR0FFSnREZlg3bXlFM3QxWlBUUjB1RFV0WTIzTWhhd3ptc0pXUTZsenB0ZzczZ3lCZHlWNmduRzg3SEJIWjFlMEd3SXVpX05FbWduTjJMc3VwRzhQcUFLVUxMdEloSlF0MkNVY0VuWHlWcUp5OEZJdmUvYmJkWjJYYTVkUnJyQTlETzVpQ0FDL2pTTXF6SC8vanYzVEtSNk9uNFJydURyaTlMN0ovby9RdUNWTFdmZnE3RFpkcTVHYTV1aUxRaXZEcE5CUjBuMW1HMHFNY1RRcUQwNV9WWU5uT3RVL2dnd1lYQkJWZ0Ewckk3eGx1MFJrRjFkSnNsa1lnWHVYMmh0VHF5R3V3Z1k4TUljazZob1I4cUhzOW40Y1BYQTZ4NHdTMzFYSi9NSTB2eHYwM0EwWVd6UXNEY0k1RGZqSEg4dVpWdms1S3M0SDdtYnFDdlhYSVBDN0FmSVh5MUNqZE5Ia1I4VEZwS0NvN3ZHYlV5Y25nTEFsYk9OczNmakYvMVZIbl9iTmZOeGd6U1ZpdzRLVy8yMl95VlBMcFNNanl4aTI4MFJ6cUtvcDFEdzdsUUFWS0J1WEY5b3FieXdfX0lZdGd5d2xlV0lhclU5eU1BVU1DRklROXZGMnMvWmtUVHNldTZfTkpJcDVXMXdiaDRDTHA2dW9hWllKdmRGNXBmeGh2Zk10YThjd09IeGR6RmI3U3V1anJjXzRTblVfWWdqVHRsNzd2N2FCbUJ1T2V6dS8vWkp1cWtCSVVmN1pwd3hXZXd5bmVvQWNjSUxTYk1PSzliTFlSNWo0OTl5WldaWkJDejRzcTlNQUd5NGtIYzZrMGh5dy0iLCJwYXRoIjoiLyIsImRvbWFpbiI6Ii5odWx1LmNvbSIsImV4cGlyZXMiOiIyMDIxLTEwLTI5VDExOjM5OjMxLjAwMFoiLCJtYXhBZ2UiOjI1OTIwMDAsInNlY3VyZSI6dHJ1ZSwiaHR0cE9ubHkiOnRydWV9; _hulu_metrics_context_v1_=%7B%22cookie_session_guid%22%3A%2205c5ae1cb70342631830545343062de3%22%2C%22referrer_url%22%3A%22%22%2C%22curr_page_uri%22%3A%22urn%3Ahulu%3Ahub%3Ahome%22%2C%22primary_ref_page_uri%22%3Anull%2C%22secondary_ref_page_uri%22%3Anull%2C%22curr_page_type%22%3A%22home%22%2C%22primary_ref_page_type%22%3Anull%2C%22secondary_ref_page_type%22%3Anull%7D; ak_bmsc=B2EC11A805CC000DE0E961B684B78954~000000000000000000000000000000~YAAQZJURYAWi3KJ6AQAA+ktaMQ2406uOo0E6LAe2AHEYNvOgZBa6TQv2UGWgojgc3fDQB/O/e5ah5obISLpizhl3liP6cJMSzNQQUvYXeOINxnd0Nzpa1ibS4ljzqdsBEgdWFgzgMA6I0ylcJx2EXuiAhLWpGeI2XglZ0NlmzzUGPUnNzCroC8yMToFQlL/bUn+Hf1Q4KUm5BbC/v5VK9BYbSY8fBT8YrfKrhvIWlc116kt+HdVz7d2yYRkUgh1Hg0rMYke5gEqnjCHehRQ2vVVbgGnEvWzuq1CtoQjzRkLxA0On0lGo7ayxEMv89DUTCQb8cGIQ5ad3oSkR8tPzgM0qwQEeP7DwuwjbFO9DEKabWh7P1bGtLhxfpw/zS2KSjtSgHBQGz3Lvw6GZ8dY0/uYa9Ig360PvITJNN6nH85lpo/Y6Rs//glu4D2Qstmsd4PJIgUb+5Z3h1+qUXnhGJC+Eyz6dxXFsih9wn39N/pM4x1czRSt/sSf0hkh5qg==; cp_enjoy_ak_bmsc=eyJuYW1lIjoiYWtfYm1zYyIsInZhbHVlIjoiQjJFQzExQTgwNUNDMDAwREUwRTk2MUI2ODRCNzg5NTR%2BMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwfllBQVFaSlVSWUFXaTNLSjZBUUFBK2t0YU1RMjQwNnVPbzBFNkxBZTJBSEVZTnZPZ1pCYTZUUXYyVUdXZ29qZ2MzZkRRQi9PL2U1YWg1b2JJU0xwaXpobDNsaVA2Y0pNU3pOUVFVdllYZU9JTnhuZDBOenBhMWliUzRsanpxZHNCRWdkV0ZnemdNQTZJMHlsY0p4MkVYdWlBaExXcEdlSTJYZ2xaME5sbXp6VUdQVW5OekNyb0M4eU1Ub0ZRbEwvYlVuK0hmMVE0S1VtNUJiQy92NVZLOUJZYlNZOGZCVDhZcmZLcmh2SVdsYzExNmt0K0hkVno3ZDJ5WVJrVWdoMUhnMHJNWWtlNWdFcW5qQ0hlaFJRMnZWVmJnR25Fdld6dXExQ3RvUWp6UmtMeEEwT24wbEdvN2F5eEVNdjg5RFVUQ1FiOGNHSVE1YWQzb1NrUjh0UHpnTTBxd1FFZVA3RHd1d2piRk85REVLYWJXaDdQMWJHdExoeGZwdy96UzJLU2p0U2dIQlFHejNMdnc2R1o4ZFkwL3VZYTlJZzM2MFB2SVRKTk42bkg4NWxwby9ZNlJzLy9nbHU0RDJRc3Rtc2Q0UEpJZ1ViKzVaM2gxK3FVWG5oR0pDK0V5ejZkeFhGc2loOXduMzlOL3BNNHgxY3pSU3Qvc1NmMGhraDVxZz09IiwiZG9tYWluIjoiLmh1bHUuY29tIiwicGF0aCI6Ii8iLCJleHBpcmVzIjoiMjAyMS0wOS0yOVQxMzozOToyOC4wMDBaIiwibWF4QWdlIjo3MTk1LCJodHRwT25seSI6dHJ1ZX0%3D; _gat_hulu1=1; utag_main=v_id:017c28eb9b2300526354f7d719e803072005606a01888$_sn:3$_ss:1$_st:1632917380188$dc_visit:1$ses_id:1632915580188%3Bexp-session$_pn:1%3Bexp-session$_prevpage:%2Fhub%2Fhome%3Bexp-1632919180857$hhid:0053a6298c752da7933b3a31135e2d7298dc02caac382ba34286ee7935794565%3Bexp-session$hpid:0053a6298c752da7933b3a31135e2d7298dc02caac382ba34286ee7935794565%3Bexp-session$k_sync_ran:1%3Bexp-session$krux_sync_session:1632915580188%3Bexp-session$g_sync_ran:1%3Bexp-session$dc_event:1%3Bexp-session$dc_region:us-east-1%3Bexp-session; _uetsid=4f3db26020af11ec8390e3856ae44788; _uetvid=8390ec00579411eba256b74b2482094e; AMCV_0A19F13A598372E90A495D62%40AdobeOrg=-408604571%7CMCIDTS%7C18899%7CMCMID%7C57935084880191295912473131446238217316%7CMCAAMLH-1633520386%7C7%7CMCAAMB-1633520386%7CRKhpRz8krg2tLO6pguXWp5olkAcUniQYPHaMWWgdJ3xzPWQmdj0y%7CMCCIDH%7C-724531244%7CMCOPTOUT-1632922786s%7CNONE%7CMCAID%7C3031E81E4D93F3C0-60001764D2175998%7CvVersion%7C4.6.0; bm_sv=D9D2B8956B01F8488F5E7BE47D6994C2~78lQk5X+4vKPt76fxqG5LPQJpVMxGOvw04hhhRdCzLJigHirlvJmMK3IoM/SOeGyE+TZXqOxaZgzQR51syC1GgW6rQzEyYWDZ1zy0srQT61zZb6SiE8u1i7MLrMofUWmhiEKyIgotCiRejCkINVL4g==; cp_enjoy_bm_sv=eyJuYW1lIjoiYm1fc3YiLCJ2YWx1ZSI6IkQ5RDJCODk1NkIwMUY4NDg4RjVFN0JFNDdENjk5NEMyfjc4bFFrNVgrNHZLUHQ3NmZ4cUc1TFBRSnBWTXhHT3Z3MDRoaGhSZEN6TEppZ0hpcmx2Sm1NSzNJb00vU09lR3lFK1RaWHFPeGFaZ3pRUjUxc3lDMUdnVzZyUXpFeVlXRFoxenkwc3JRVDYxelpiNlNpRTh1MWk3TUxyTW9mVVdtaGlFS3lJZ290Q2lSZWpDa0lOVkw0Zz09IiwiZG9tYWluIjoiLmh1bHUuY29tIiwicGF0aCI6Ii8iLCJtYXhBZ2UiOjcxNTUsImh0dHBPbmx5Ijp0cnVlfQ%3D%3D; metrics_tracker_session_manager=%7B%22session_id%22%3A%2299DBB037FBAD4F85B2069CF1694B9BDD-61b881e0-c49a-4c03-9aa7-ba34883a468b%22%2C%22creation_time%22%3A1632915576563%2C%22visit_count%22%3A1%2C%22session_seq%22%3A23%2C%22idle_time%22%3A1632915622427%7D",
          // ads
          cookies: "kppid=3iGI8ZsdtvYXk39Jt06QDA; _h_csrf_id=33cf019eb08785c78310bc262b609e000ee8dc85c39616c51a024b562565226e; _hsstat=existing-subscriber; guid=99DBB037FBAD4F85B2069CF1694B9BDD; geo=47.5725824%26-117.9090944%261632937850672; guid=99DBB037FBAD4F85B2069CF1694B9BDD; ak_bmsc=A96A0F26586F9EA1FD04A4AA3DCFF236~000000000000000000000000000000~YAAQZJURYGBN86J6AQAA+Pm5Nw1AAHQ2VoYoe88byrHt2IsCT6uSt8woObyx2tPzshPtr6dErt+lHONg2TRfYjDdN1sT6gDA/iGC+IO1jVpGrfNr/tJVLXicc/UsCpKYtNTMMn4SKwJ87AYQiATjxVsoEp59gWRhJ8B+F8l8TUnyx/nRENZdHtGqyAcBAtrM8/EoMPpuSfPNb9mGjks8sekqYoscPHRcKby/q4cZb6TP7zsUYqb7ZESu1AKFmDQ0QhGr9ks3qS0XKUWCDI9ZW/PcCmxJMlhjkaoeyvrVgN21ncK4OQyN7Qim3wQDguASAd3Vxs9JpSARc+A9bB2ha8iOCCEOTmFBm2uTG/0DRsfioIS0OR3OZlrddd6D7EKPbHVSt4eUCPki8/aH2zPvXRmC3vGy2FDZT7uo6TS2RJxbNtS0HVvFnVUm0OZbkHv0GuFfrwxNB3PNMugNOnAzj8Lo8/wu0yhX3XuychsoYfUkxFilZ0h75w==; __utma=155684772.259994502.1633022537.1633022537.1633022537.1; __utmc=155684772; __utmz=155684772.1633022537.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); __utmt=1; __utmb=155684772.1.10.1633022537; _ga=GA1.2.259994502.1633022537; _gid=GA1.2.1832851747.1633022538; _uetsid=4f3db26020af11ec8390e3856ae44788; _uetvid=8390ec00579411eba256b74b2482094e; _tq_id.TV-81453654-1.edd5=3cfe297313eaefbd.1632772332.0.1633022538..; _gcl_au=1.1.2061069380.1633022538; _scid=45ab6d55-ef90-4f5e-93f9-063333d1f43b; stc115168=tsa:1633022538590.1015785164.7937622.18469904780848445:20210930175218|env:1%7C20211031172218%7C20210930175218%7C1%7C1047148:20220930172218|uid:1633022538589.781321506.2581158.115168.1296705111.:20220930172218|srchist:1047148%3A1%3A20211031172218:20220930172218; _sctr=1|1632985200000; _hulu_pgid=276824067; _hulu_uid=169824555; _hulu_e_id=NGYw6vJsBrr3hKruAB1rDA; _hulu_bluekai_hashed_uid=e1dc75adc5c68e1f5145b1edfc0c24f2; _hulu_assignments=eyJ2MSI6W3siZSI6MTA4MywidCI6Mjk2OSwibiI6ImJ5dy1zZWVkLXByZWQtdDIifV19; _p_edit_token=UghLejTfHjJTgwag9xbptA; _hulu_dt=7PwN834buA5JoiBFh%2FibzQRfHW0-WOYLK3Rq258gEBeksrEIBg--NNrwfhCETqYqXMkIRizyyZppHMEFMvcfChHJblVNWXtO%2FEaFfZKc99tR664efXnwjUVlwlMc_OXV%2FBP9S6zaOBaqfaYzX5vx1z2ZoN3wis3C8SAMyMSE0M7VTzoHlKqUwGywhyn2q6DKwaX1C3BFXsiAUfD6GQ36JvA1ptCz7EYw3jAzG8dXPeTIcvs3tYI556xlCKY6xMoW6z328mHU3cxDBWMSQaJ5HQwoWF9yAgZzjOdNt%2FWrXEQO%2FSXRVK_N9VGqxi8BYOuTjwOkFiG%2FQuhbWr48sX5wWFhNgRmV7fS1ctBdKsqYJ61yIybugZDb6Eo3OpDiMYM867ZcbTsKj%2FG0_MV0r8g3%2Fp7FPKjb7Eb0dLl_rSIK_Wc7YhkFKa0sj4O2vEtxV6PdFQ8eooqcilJpv_KfHiuLq8UgRUl2%2FLBRXAFugf1JVqyx8sWda8jeE3ogeZrRhMmF8sMqUWLV5oobb8Euo73jbkylMEgzHCJWDTsWrIMCO1kEtb7TPYeXon24S1a2ory0DBmpw%2FI6drkzN_d17Iqv1Jh6A%2FZUeeY%2FFi4iX7ioZumV0uPD%2Fec5JgvU6R5gnI%2Fm5XCWIHDKhVB8ISdL3Q7kZ1vY6IB7Vab4wOczQKWuz0ldCC_qqBffLVYRN1u8PxkdyZ3GiWYW_8QQOZe6U8O7jM%2FsEZyL2OB5Pz%2FJ8TSAAJU2WRaV42jGPIHBPmFaypGDpQr3bHiovzyldqek8XFvsVIp_IQlboyNEDkthtIes%2FXF3AElSDpzXmUQpmbiz6I%2F_lD8FOjhrR6DfKGfIWLaLQ9THlh_entoL7B3bBO2uXLnLktOFG3BsKvEKCPsmPuTLgaE82HQbAQSOyyqjzLCzLn%2FaNyBETk-; kppid=NGYw6vJsBrr3hKruAB1rDA; _hulu_session=L52ZVZcKZYC2UVreUCZuhY69Sfw-UhqKbvu0hgd3i_aKAYo8zw--OABazaObKTYhsm5MthREGH2yOucFg9nzSKhhfTYPlJByHu0kcIgGIikJy683H6c1EOLSxUMeUGLJV0iNCXTxxMVNwPSPeYRc1vTLTPEHzYfJk5boRAGViV0%2F5buCkRdhoi9bNMg%2FmWZ%2FtQU%2FREA1mM2klrJbqPbjuXKnrrO77zGVwB1Hy16bnqSsLHcEFr9SRLRIc11TGqQKiD6Z8I6ywfnt8e7rxfUtLaiF7M1d29xgnJCLcvjagK7vi7FwxwlOV7pVnTa7ub5DgL4oNm4024QlAaMhqY4NJvJYrpJt5hT3EUcQx_gaINYZRDaCPe_CVsW2XUMgBpoJPH68xJHHB4qeN18aWJprTP6EbbwbC2Kl%2Fa%2F5SsYprleXc3ZFKdiY5ksf8Dck%2FFbaW%2F_Sc_e0VPaD4YLmoQj3xmmoewdb3k8vG8vpgtWWA7yNY6YwymbdCoj2II2qPBOOQFZdtYz2XNHW895_eRVciQlVhg8C4cYZ7%2FfTZxnw5K8hUNzIIZZ8TveRuFnP4_sCtpRm26mFTJKnfPpTS7i2C6bDSbk7pvxuh8WPctgeRnkFfJjD1MFBvryKwWktcG8fnO33kWYR%2F6ojsWgmn8RDnn6D_X3PwVOnQB7KKql5tvT7iWS1dP00B%2FPbyHD6KFc1i9aycpqKFwzqErT8wX3yO9zvyJ0ydzkH%2Ffh2TGjqc1ImE7D%2FnRreG2dCMvfbNulYMaMP_xdgGjxI%2FnwpZZ2Glpa0BtPvtUU9yRcFQhTIz5Vxf_SBgs52wLkhjw1cRDBw2Gu4o5XAeGd8u5BcOT_PkhUZrUb2A0E70aepp3nszluvuv1zD2og1S59b1RB5l6WdlryLRT0J2WV7kpt7rebXw4ndYx_tOJsCVd09q8JyJ2VhM1pZwuUGQdNtnGMJF%2FGdtHg1CYyQiQd4eMM50B2hUUcDYr6hz0Cn1NhVBtOQaETi4DSWnjwrMg7rGRop3i2hWvARMgzvmgc23hbAqaq8iqgHHV0Z1LLXJQzxcHWrSqgPNqp6XQ3f1UVgn4xJxiho8Ly7qeuFw--; _hulu_pid=169824555; _hulu_is_p_kids=0; _hulu_pname=Chad%20Michael; _hulu_pprotect=1633022552210; AMCVS_0A19F13A598372E90A495D62%40AdobeOrg=1; _persisted_HEM=2fd48add4f8601e30e9e6803ceddbc9469c88205afa011eacda57424eca4ab52; s_cc=true; _dd_s=rum=0&expire=1633023580490; XSRF-TOKEN=8ddc3074-efa0-4523-bda8-e1fba2138719; _hulu_metrics_context_v1_=%7B%22cookie_session_guid%22%3A%22497d0e79bf64d0237a7f2ecb626d123d%22%2C%22referrer_url%22%3A%22https%3A%2F%2Fwww.hulu.com%2Fhub%2Fhome%22%2C%22curr_page_uri%22%3A%22urn%3Ahulu%3Ahub%3Ahome%22%2C%22primary_ref_page_uri%22%3A%22app%3Awatch%22%2C%22secondary_ref_page_uri%22%3A%22urn%3Ahulu%3Ahub%3Ahome%22%2C%22curr_page_type%22%3A%22home%22%2C%22primary_ref_page_type%22%3A%22watch%22%2C%22secondary_ref_page_type%22%3A%22home%22%2C%22secondary_ref_click%22%3A%22account%22%2C%22primary_ref_click%22%3A%22Blue%20Bloods%22%2C%22primary_ref_collection%22%3A%22282%22%2C%22primary_ref_collection_source%22%3A%22heimdall%22%2C%22ref_collection_position%22%3A0%7D; bm_sv=C691545FB621802539C059DEB11AC066~78lQk5X+4vKPt76fxqG5LLWuse0iVr4V5TuzlToztdsUvARby/PrPss2Ey8Yt+d4OsoF6QIIITvI9z7PXApFD/3L/7ENMW7tK6QeB6qTTNcWs8DgieYR+yHu9hTWEXGkRhgSpFXW7jcIEJmrO1CO3XB68wPmTvNnftf8MZLYcK8=; utag_main=v_id:017c37ba6e90000c6622b5dabb4d03072001c06a01888$_sn:1$_ss:0$_st:1633024480941$ses_id:1633022537361%3Bexp-session$_pn:3%3Bexp-session$device_category:desktop%3Bexp-session$_prevpage:%2Fhub%2Fhome%3Bexp-1633026281451$k_sync_ran:1%3Bexp-session$krux_sync_session:1633022537361%3Bexp-session$g_sync_ran:1%3Bexp-session$dc_visit:1$dc_event:1%3Bexp-session$dc_region:us-east-1%3Bexp-session$hhid:27ab587ed2b315b17c4da568455a9ce76ef079c2329ee263ad0be357a16f449a%3Bexp-session$hpid:27ab587ed2b315b17c4da568455a9ce76ef079c2329ee263ad0be357a16f449a%3Bexp-session; _gat_hulu1=1; metrics_tracker_session_manager=%7B%22idle_time%22%3A1633022683409%2C%22session_seq%22%3A87%2C%22session_id%22%3A%2299DBB037FBAD4F85B2069CF1694B9BDD-35b8d0a4-fb00-4dfe-9d7c-c509706fd43c%22%2C%22creation_time%22%3A1633022536241%2C%22visit_count%22%3A1%7D; AMCV_0A19F13A598372E90A495D62%40AdobeOrg=-408604571%7CMCIDTS%7C18901%7CMCMID%7C57935084880191295912473131446238217316%7CMCAAMLH-1633627483%7C7%7CMCAAMB-1633627483%7CRKhpRz8krg2tLO6pguXWp5olkAcUniQYPHaMWWgdJ3xzPWQmdj0y%7CMCCIDH%7C-724531244%7CMCOPTOUT-1633029883s%7CNONE%7CMCAID%7C3031E81E4D93F3C0-60001764D2175998%7CvVersion%7C4.6.0;",
          expiresAt: 1632872993472,
        }
      },
      AMAZON: {
        tokens: {
          // cookies: "session-id=133-8373025-1570834; ubid-main=130-0828590-3776626; x-main=\"ms4Q5GPjHIQfotg0j@VKNsq@DgFAM7C2\"; at-main=Atza|IwEBIAdEzCoHdjBLeUvo2WfVL68YZT-xXca-m4NJhi_r5STovJNSRaJjWoqtMmmVDdh9bTsXyU-q27qg8B92FoqGGG2mesp3Pw-dsheBiB24RPbH5MnVYIQn5r1nwIdNI9SrBVtzuiWyuOkdg5Lb8lXLbWZzmMOwcWuZFshaXjmkCg7fLMyrVUR1xNTb0Af0bLfb5ugK8JPFccJbWv-H7qiVe3Mu; sess-at-main=\"NyG2KETCK+qyh86Z+y/idArdjHlyux7YmFkO0FoTR9E=\"; sst-main=Sst1|PQFzfKHI8GqcDX6utsyuoK0ECQ9qDA5H5Te8TcU4nK0J5QxJvNE31j05FPnvMNG2PCgG3nOJpYCtNxuWT-FRm46m9cd8D0cu9j9dpDLBRX5e9SvquSv7loSMNA6FqLeekPM4hvwot9vm3JCl6wRWinz8kNyUzrYvVQWekaJ4nhvDCUbdK6bRlphRp1QJUdLZ7e1YGEu-gPGn0s-_SxmRC7I0DcWofHptaLcjhrklZAjf8XZbnlBYT5YVmDOtyS911ZafGGzQwI4HufRdrKMJRhB1dlogK7XZGd_0r6ieM4ldIu4; lc-main=en_US; session-id-time=2082787201l; i18n-prefs=USD; csm-hit=tb:s-ZD34YQBJR1V8MZWQTQFC|1632497663456&t:1632497663457&adb:adblk_no; session-token=\"ctlMkhpHIxXu9TYYZQCcHImF3bU9/d+JafVKJjqnzo43DoKifYvTZjtPuv6Om14CzUm+HZXWFFAY+xqCzSJh1kgl03CEAbuI1/A0pGxan8rcWrpRNUa2/EDtRTG78Sj0zN71bQyvdLB7NtoCW+vZoC39C5xwQGFNcMYjZpdlTpC/A382+3BUV2DyoGvy83oWyiJbLeGZDtR+0LgQcOvJJQ==\"; skin=noskin",
          cookies: "_mkto_trk=id:365-EFI-026&token:_mch-amazon.com-1619447138918-81290; s_fid=71577CDDE6CEC14D-0F226C564A1BB0B1; regStatus=pre-register; aws-target-data=%7B%22support%22%3A%221%22%7D; aws-target-visitor-id=1619488153525-93121.35_0; ubid-main-av=132-8900815-6641036; lc-main-av=en_US; session-id-eu=257-3050479-2363322; ubid-acbuk=257-3246387-1824109; session-id=147-5873831-9871843; ubid-main=130-2786225-1043312; skin=noskin; appstore-devportal-locale=en_US; cp_enjoy_appstore-devportal-locale=eyJuYW1lIjoiYXBwc3RvcmUtZGV2cG9ydGFsLWxvY2FsZSIsInZhbHVlIjoiZW5fVVMiLCJkb21haW4iOiIuYW1hem9uLmNvbSIsInBhdGgiOiIvIn0%3D; cp_enjoy_sess-at-main=eyJuYW1lIjoic2Vzcy1hdC1tYWluIiwidmFsdWUiOiJcIjZRWVlGZWEyWkw3c0RsK3UyVzI3dWYzOC84NXVvdE9CV2ZQVjVhL3YyUE09XCIiLCJ2ZXJzaW9uIjoiMSIsImRvbWFpbiI6Ii5hbWF6b24uY29tIiwibWF4QWdlIjozMTUzNjAwMCwiZXhwaXJlcyI6IjIwMjItMDktMjdUMTk6NDY6MTMuMDAwWiIsInBhdGgiOiIvIiwic2VjdXJlIjp0cnVlLCJodHRwT25seSI6dHJ1ZX0%3D; cp_enjoy_at-main=eyJuYW1lIjoiYXQtbWFpbiIsInZhbHVlIjoiQXR6YXxJd0VCSUlPb0V6YTYwdVBTbHhJcVR2cno1cE5SYmxXOEpjbmZGOXJpMTZXSkVyQ0E4QlltSFh6ajZOTGlOTUstS1VweGJuazZLMlNFWDRNbHh2aEhRa2FJSkVkbHJpQnlwaWx1ekxtSjNsMC1rdXNFWTNGWjVWZm9fMHNqS1N2Z1NkcThyMmp3cHB3OGNZZDZPWWl3YTMyU1F3REpXNmg5dWROdG5FMzIyUEpmMUNMX0hYMmhqYVNuYU1NV2NTYzd2bVRGZk1kN096VGU0M0lQZXBZSXhJbXRfaHNHIiwiZG9tYWluIjoiLmFtYXpvbi5jb20iLCJleHBpcmVzIjoiMjAyMi0wOS0yN1QxOTo0NjoxMy4wMDBaIiwicGF0aCI6Ii8iLCJzZWN1cmUiOnRydWUsImh0dHBPbmx5Ijp0cnVlfQ%3D%3D; cp_enjoy_x-main=eyJuYW1lIjoieC1tYWluIiwidmFsdWUiOiJcInEyRkdGcWVlRz9xdWpqY2ZRQEhqMXc0akRWU0dGbWxGQ0pWQTdqYjQ2ZVBUc0RzZDRQZWlnQ1hVcUhWTTZuSkVcIiIsInZlcnNpb24iOiIxIiwiZG9tYWluIjoiLmFtYXpvbi5jb20iLCJtYXhBZ2UiOjMxNTM2MDAwLCJleHBpcmVzIjoiMjAyMi0wOS0yN1QxOTo0NjoxMy4wMDBaIiwicGF0aCI6Ii8iLCJzZWN1cmUiOnRydWV9; cp_enjoy_ubid-main=eyJuYW1lIjoidWJpZC1tYWluIiwidmFsdWUiOiIxMzAtMjc4NjIyNS0xMDQzMzEyIiwiZG9tYWluIjoiLmFtYXpvbi5jb20iLCJleHBpcmVzIjoiMjAyMi0wOS0yN1QxOTo0NjoxMy4wMDBaIiwicGF0aCI6Ii8iLCJzZWN1cmUiOnRydWV9; at_check=true; AMCVS_4A8581745834114C0A495E2B%40AdobeOrg=1; s_cc=true; s_sq=%5B%5BB%5D%5D; cp_enjoy_session-id-time=eyJuYW1lIjoic2Vzc2lvbi1pZC10aW1lIiwidmFsdWUiOiIyMDgyNzg3MjAxbCIsImRvbWFpbiI6Ii5hbWF6b24uY29tIiwiZXhwaXJlcyI6IjIwMzYtMDEtMDFUMDg6MDA6MDEuMDAwWiIsInBhdGgiOiIvIn0%3D; cp_enjoy_session-id=eyJuYW1lIjoic2Vzc2lvbi1pZCIsInZhbHVlIjoiMTQ3LTU4NzM4MzEtOTg3MTg0MyIsImRvbWFpbiI6Ii5hbWF6b24uY29tIiwiZXhwaXJlcyI6IjIwMzYtMDEtMDFUMDg6MDA6MDEuMDAwWiIsInBhdGgiOiIvIn0%3D; cp_enjoy_session-token=eyJuYW1lIjoic2Vzc2lvbi10b2tlbiIsInZhbHVlIjoiXCJHK1JtMnJzNnhqdDhuODcrMHZZQnQ3SDNaU1I2V1VROSsvZ3dwa21HakRuRFh6cGVhbDhVZE1oMEMrdDhwb2c4cGRzTVBEdmdtTDFnZE5qV3phKy9wNlNFMjN2TkJtbnRHcjdVZE9QcisrMEl4bVFEOXBxSnBvTWg0U3FUQXJhOXJEdmlwQ24zZG01K3hNNWIrcnZjZW52WGVZSHIvRmV5a1VCSTFKSzgyVHE1dWkzRDVwZmNxb05hNGpwWFc2UkluNDlGRy9VeXI3TUlBMWZNTjJDU3ZBOWxLYkM3dVhlMXNSdTlHQUJZOURvPVwiIiwidmVyc2lvbiI6IjEiLCJkb21haW4iOiIuYW1hem9uLmNvbSIsIm1heEFnZSI6NDUwMDEzMDU3LCJleHBpcmVzIjoiMjAzNi0wMS0wMVQwODowMDowMS4wMDBaIiwicGF0aCI6Ii8ifQ%3D%3D; lc-main=en_US; AMCV_4A8581745834114C0A495E2B%40AdobeOrg=-1124106680%7CMCIDTS%7C18900%7CMCMID%7C76957754178317864300470602235959822898%7CMCAAMLH-1633559615%7C7%7CMCAAMB-1633559615%7CRKhpRz8krg2tLO6pguXWp5olkAcUniQYPHaMWWgdJ3xzPWQmdj0y%7CMCOPTOUT-1632962015s%7CNONE%7CMCAID%7C3031E81E4D93F3C0-60001764D2175998%7CvVersion%7C5.2.0; mbox=PC#ee7495f618f24cce9032989a8d96ebaf.35_0#1696199655|session#6fe8a91e0d56490f80bf1a6953b017fa#1632956715; s_nr=1632954858538-Repeat; s_lv=1632954858539; session-token=\"877e+iyjvuOr7Rx9hVCeKK2MBAYN2TtXCse8/ZGRk7+5DYEBpBkDjKjWbgepL4U+csNkNI9xhVzRSPWc+EEZ4dZJpZE1JZz44ZrlekdwxeInE72WAzYSFd0RiaobRdeOFQ4WiRKyVt3wZSVq7Mxzk06YASbQG2TsbBSKA+7t3Lq6GHHo7Ez7zorPXUc8LnqOmAFyPVotDsvGg1cWbHc6JFbUF6xvXHXUULx2Nj4WxqY=\"; x-main=q9zPwQ2hkHQsOAco18PCTFmfUTWv4mVZ; at-main=Atza|IwEBIA0pUl_YNaSrExV8XGKe6KT8Vvhy8hdqev1W4c410to26FzvPkz62DXZQJEVFnHTZk0PlZn0u4CYgIpUFoKBkxHqi1Kne5DDnDOjqje4wKCbjKzrjknO8xsgQRYeUbNueOqeKxlkl3ugyBCKP52wULdigL-Um_SFyDjUoSMF0ghe02oqOULx7Na6AbeG90rZl_qGosOr5MIk1vcggOOJy6xH; sess-at-main=\"+AAyqeu0SeOtwCCitouJz4rZlpxdbCHqBb/Iiw6BCZw=\"; sst-main=Sst1|PQFi1sSjHLzIvHVe9ArcABxoCUn2JFhvJUAlD6TlLum5xKA_ckY1DUacKn58aNV2DgpCUtD0PAInPOkR9NiPKsbibL2aRO-E-oetPy7nwIlj2ure2o7fW5Em9OIvpdiYKNayTRvnHhbwOVnlSawuaKKQbBIG2pamAuaqqMqo7uPWumr29YJ6FvMQR1Qrl6BMf9h5ikLI5wmva10JXACaFMW_hQPxYEBAHIizPVM5oH0qzMJYMDPAwwpQeXIRfUT1JEJccshHnJQcgZ2NGGWVyVamwvjQdGSiWH1qr2NA4V2V32Y; session-id-time=2082787201l; i18n-prefs=USD",
          expiresAt: 1630383042789,
        }
      },
      NETFLIX: {
        tokens: {
          accessToken: { userName: "media@medlor.com", password: "$MeDia1!" },
          expiresAt: 1630383042789,
        }
      },
      YOUTUBE: {
        tokens: {
          // cookies: "session-id=133-8373025-1570834; ubid-main=130-0828590-3776626; x-main=\"ms4Q5GPjHIQfotg0j@VKNsq@DgFAM7C2\"; at-main=Atza|IwEBIAdEzCoHdjBLeUvo2WfVL68YZT-xXca-m4NJhi_r5STovJNSRaJjWoqtMmmVDdh9bTsXyU-q27qg8B92FoqGGG2mesp3Pw-dsheBiB24RPbH5MnVYIQn5r1nwIdNI9SrBVtzuiWyuOkdg5Lb8lXLbWZzmMOwcWuZFshaXjmkCg7fLMyrVUR1xNTb0Af0bLfb5ugK8JPFccJbWv-H7qiVe3Mu; sess-at-main=\"NyG2KETCK+qyh86Z+y/idArdjHlyux7YmFkO0FoTR9E=\"; sst-main=Sst1|PQFzfKHI8GqcDX6utsyuoK0ECQ9qDA5H5Te8TcU4nK0J5QxJvNE31j05FPnvMNG2PCgG3nOJpYCtNxuWT-FRm46m9cd8D0cu9j9dpDLBRX5e9SvquSv7loSMNA6FqLeekPM4hvwot9vm3JCl6wRWinz8kNyUzrYvVQWekaJ4nhvDCUbdK6bRlphRp1QJUdLZ7e1YGEu-gPGn0s-_SxmRC7I0DcWofHptaLcjhrklZAjf8XZbnlBYT5YVmDOtyS911ZafGGzQwI4HufRdrKMJRhB1dlogK7XZGd_0r6ieM4ldIu4; lc-main=en_US; session-id-time=2082787201l; i18n-prefs=USD; csm-hit=tb:s-ZD34YQBJR1V8MZWQTQFC|1632497663456&t:1632497663457&adb:adblk_no; session-token=\"ctlMkhpHIxXu9TYYZQCcHImF3bU9/d+JafVKJjqnzo43DoKifYvTZjtPuv6Om14CzUm+HZXWFFAY+xqCzSJh1kgl03CEAbuI1/A0pGxan8rcWrpRNUa2/EDtRTG78Sj0zN71bQyvdLB7NtoCW+vZoC39C5xwQGFNcMYjZpdlTpC/A382+3BUV2DyoGvy83oWyiJbLeGZDtR+0LgQcOvJJQ==\"; skin=noskin",
          cookies: "VISITOR_INFO1_LIVE=ZUWs-NLdWwQ;path=/;domain=.youtube.com; CONSENT=YES+US.en+201912;path=/;domain=.youtube.com; NID=220=Ph1FCQAiOWWUvSHHVWJVwM9pSBY04jALTcuyHhm2AaXHBoWWCi-kR9k5gQB0qPZNqtKy0_EE6WPjlU_0zxngtuOoG2emMNipbeb3ecH1elc4LQICWThSHxlK6x8_hJFHm--ny3--amOWCDAlx_CvX3XlIqziCyW4xTJL65AJVPM;path=/;domain=.youtube.com; PREF=f6=80&tz=America.Los_Angeles&al=en&f5=30000;path=/;domain=.youtube.com; _ga=GA1.2.1798331689.1632745190;path=/;domain=.youtube.com; _gcl_au=1.1.1955434094.1632745190;path=/;domain=.youtube.com; cp_enjoy___Secure-3PAPISID=eyJuYW1lIjoiX19TZWN1cmUtM1BBUElTSUQiLCJ2YWx1ZSI6InROZldSRkJNUjlTRFFuNTIvQXhsQnNUWC1hdEMzYUJRamciLCJkb21haW4iOiIueW91dHViZS5jb20iLCJleHBpcmVzIjoiMjAyMy0wOS0yN1QxOTo0NjozMC4wMDBaIiwicGF0aCI6Ii8iLCJzZWN1cmUiOnRydWUsInByaW9yaXR5IjoiSElHSCIsInNhbWVTaXRlIjoibm9uZSJ9;path=/;domain=.youtube.com; cp_enjoy___Secure-1PAPISID=eyJuYW1lIjoiX19TZWN1cmUtMVBBUElTSUQiLCJ2YWx1ZSI6InROZldSRkJNUjlTRFFuNTIvQXhsQnNUWC1hdEMzYUJRamciLCJkb21haW4iOiIueW91dHViZS5jb20iLCJleHBpcmVzIjoiMjAyMy0wOS0yN1QxOTo0NjozMC4wMDBaIiwicGF0aCI6Ii8iLCJzZWN1cmUiOnRydWUsInByaW9yaXR5IjoiSElHSCIsInNhbWVwYXJ0eSI6IiJ9;path=/;domain=.youtube.com; cp_enjoy_SAPISID=eyJuYW1lIjoiU0FQSVNJRCIsInZhbHVlIjoidE5mV1JGQk1SOVNEUW41Mi9BeGxCc1RYLWF0QzNhQlFqZyIsImRvbWFpbiI6Ii55b3V0dWJlLmNvbSIsImV4cGlyZXMiOiIyMDIzLTA5LTI3VDE5OjQ2OjMwLjAwMFoiLCJwYXRoIjoiLyIsInNlY3VyZSI6dHJ1ZSwicHJpb3JpdHkiOiJISUdIIn0%3D;path=/;domain=.youtube.com; cp_enjoy_APISID=eyJuYW1lIjoiQVBJU0lEIiwidmFsdWUiOiI3LWJCMTk4VzFneWV2b24wL0E2bEY0b0NFQko0dWVhdFdPIiwiZG9tYWluIjoiLnlvdXR1YmUuY29tIiwiZXhwaXJlcyI6IjIwMjMtMDktMjdUMTk6NDY6MzAuMDAwWiIsInBhdGgiOiIvIiwicHJpb3JpdHkiOiJISUdIIn0%3D;path=/;domain=.youtube.com; cp_enjoy_SSID=eyJuYW1lIjoiU1NJRCIsInZhbHVlIjoiQXFGNkhSNmxCQ1BhSzlTby0iLCJkb21haW4iOiIueW91dHViZS5jb20iLCJleHBpcmVzIjoiMjAyMy0wOS0yN1QxOTo0NjozMC4wMDBaIiwicGF0aCI6Ii8iLCJzZWN1cmUiOnRydWUsImh0dHBPbmx5Ijp0cnVlLCJwcmlvcml0eSI6IkhJR0gifQ%3D%3D;path=/;domain=.youtube.com; cp_enjoy_HSID=eyJuYW1lIjoiSFNJRCIsInZhbHVlIjoiQWNBeDZhQXVubXcyMWNCOVMiLCJkb21haW4iOiIueW91dHViZS5jb20iLCJleHBpcmVzIjoiMjAyMy0wOS0yN1QxOTo0NjozMC4wMDBaIiwicGF0aCI6Ii8iLCJodHRwT25seSI6dHJ1ZSwicHJpb3JpdHkiOiJISUdIIn0%3D;path=/;domain=.youtube.com; cp_enjoy___Secure-3PSID=eyJuYW1lIjoiX19TZWN1cmUtM1BTSUQiLCJ2YWx1ZSI6IkNnalFuS3JoSEdCaWoxQ3BEVmtuWGQ3TjMtRE9TOTI3V2E1Um42RTJGQjNSUnI4SWRXTVhIRmdMd1pRN01tUWJqY2dlc3cuIiwiZG9tYWluIjoiLnlvdXR1YmUuY29tIiwiZXhwaXJlcyI6IjIwMjMtMDktMjdUMTk6NDY6MzAuMDAwWiIsInBhdGgiOiIvIiwic2VjdXJlIjp0cnVlLCJodHRwT25seSI6dHJ1ZSwicHJpb3JpdHkiOiJISUdIIiwic2FtZVNpdGUiOiJub25lIn0%3D;path=/;domain=.youtube.com; cp_enjoy___Secure-1PSID=eyJuYW1lIjoiX19TZWN1cmUtMVBTSUQiLCJ2YWx1ZSI6IkNnalFuS3JoSEdCaWoxQ3BEVmtuWGQ3TjMtRE9TOTI3V2E1Um42RTJGQjNSUnI4SUdaQXZtS0ZyNDR5cW1zUGJxYVk0ancuIiwiZG9tYWluIjoiLnlvdXR1YmUuY29tIiwiZXhwaXJlcyI6IjIwMjMtMDktMjdUMTk6NDY6MzAuMDAwWiIsInBhdGgiOiIvIiwic2VjdXJlIjp0cnVlLCJodHRwT25seSI6dHJ1ZSwicHJpb3JpdHkiOiJISUdIIiwic2FtZXBhcnR5IjoiIn0%3D;path=/;domain=.youtube.com; cp_enjoy_SID=eyJuYW1lIjoiU0lEIiwidmFsdWUiOiJDZ2pRbktyaEhHQmlqMUNwRFZrblhkN04zLURPUzkyN1dhNVJuNkUyRkIzUlJyOElJajZpUzY4bE1BM3N1SHU2eHdPNU53LiIsImRvbWFpbiI6Ii55b3V0dWJlLmNvbSIsImV4cGlyZXMiOiIyMDIzLTA5LTI3VDE5OjQ2OjMwLjAwMFoiLCJwYXRoIjoiLyIsInByaW9yaXR5IjoiSElHSCJ9;path=/;domain=.youtube.com; cp_enjoy___Secure-3PSIDCC=eyJuYW1lIjoiX19TZWN1cmUtM1BTSURDQyIsInZhbHVlIjoiQUppNFFmR1J3dWJ6cmFqX1h3NHpBdXNLTlg4Z3FXSlZiVUVYSkp0NUtaeGpkUC14anJqTVA2cEpHeVBDV0xJMEZjTFcyUnhXIiwiZXhwaXJlcyI6IjIwMjItMDktMjlUMTk6MzQ6MzAuMDAwWiIsInBhdGgiOiIvIiwiZG9tYWluIjoiLnlvdXR1YmUuY29tIiwic2VjdXJlIjp0cnVlLCJodHRwT25seSI6dHJ1ZSwicHJpb3JpdHkiOiJoaWdoIiwic2FtZVNpdGUiOiJub25lIn0%3D;path=/;domain=.youtube.com; cp_enjoy_SIDCC=eyJuYW1lIjoiU0lEQ0MiLCJ2YWx1ZSI6IkFKaTRRZkVLU0Z3R3g2VHVuRTNaWHhFdkI2a2FzdDctTGZwQXFVemhBUno1eUYzNnJOS0doVllIajd2ZG55Xy1YUHpneTVDTXBnIiwiZXhwaXJlcyI6IjIwMjItMDktMjlUMTk6MzQ6MzAuMDAwWiIsInBhdGgiOiIvIiwiZG9tYWluIjoiLnlvdXR1YmUuY29tIiwicHJpb3JpdHkiOiJoaWdoIn0%3D;path=/;domain=.youtube.com; _gcl_dc=GCL.1633180748.CjwKCAjwhuCKBhADEiwA1HegORgkckNCTqkzYFVH2JwDjJci7kgk2E-T4GV-Z-xEe4YfcD70cx-YlBoCXHsQAvD_BwE;path=/;domain=.youtube.com; _gcl_aw=GCL.1633180748.CjwKCAjwhuCKBhADEiwA1HegORgkckNCTqkzYFVH2JwDjJci7kgk2E-T4GV-Z-xEe4YfcD70cx-YlBoCXHsQAvD_BwE;path=/;domain=.youtube.com; _gac_UA-90547405-1=1.1633180748.CjwKCAjwhuCKBhADEiwA1HegORgkckNCTqkzYFVH2JwDjJci7kgk2E-T4GV-Z-xEe4YfcD70cx-YlBoCXHsQAvD_BwE;path=/;domain=.youtube.com; YSC=x03Iw5AOz4w;path=/;domain=.youtube.com; LOGIN_INFO=AFmmF2swRAIgdx-UQ6jDxzSfW1nuuGWXOqV4yadAAViW92VwZcmQ71QCIFGCA4z8UXqowcBtU_DkHmobMZ_IQT9-9u1AQICLT8Wr:QUQ3MjNmd29DNXFDQVhiQmZjcG1DNWljcnl5elJ3bkFUSWZRY3k1QTBOOW02QzlXT0k5SlA2bDVJbTRvZjdZN1pFWlhydVRfcFFGY0VMc2VlN3ZsRHk1Si1iRUVNNUw3aEFlWXhPNTltSFREOTR4N0ZaMjZoa1lLd3hTVWhkbnlQaVVoU08xNVN6MmRKNlFxTC13RDhkdV9aRDZhQVFEeEFR;path=/;domain=.youtube.com; SID=DQjgTYzk_krNuarhemp-T1gvhrH0w83fW8PuEB0FyX2tbjQL93iA1R5pJk2q6d2wA73pzA.;path=/;domain=.youtube.com; __Secure-1PSID=DQjgTYzk_krNuarhemp-T1gvhrH0w83fW8PuEB0FyX2tbjQLX3uxmsbCCnLX-4Gk525oVw.;path=/;domain=.youtube.com; __Secure-3PSID=DQjgTYzk_krNuarhemp-T1gvhrH0w83fW8PuEB0FyX2tbjQLL04yNklR2SAMQeRUXhcofA.;path=/;domain=.youtube.com; HSID=AW0xGi_h57c1wDh_s;path=/;domain=.youtube.com; SSID=AdG4cA6m3oli7PmLI;path=/;domain=.youtube.com; APISID=CmCT-LJkXEbEYnGq/Aq7CBzm8nYqk1_GQ9;path=/;domain=.youtube.com; SAPISID=EAwK6tIW68GZaRXc/AAN20CWXFnvuPHsGe;path=/;domain=.youtube.com; __Secure-1PAPISID=EAwK6tIW68GZaRXc/AAN20CWXFnvuPHsGe;path=/;domain=.youtube.com; __Secure-3PAPISID=EAwK6tIW68GZaRXc/AAN20CWXFnvuPHsGe;path=/;domain=.youtube.com; SIDCC=AJi4QfH1SNRP-EJ0hmf3WN6Qi1PkaKew0PW1XkRIwY8HVT2xrA4idhjF268zkqM9cf7blSuw;path=/;domain=.youtube.com; __Secure-3PSIDCC=AJi4QfEUI4ALNmV3K5GnzS4q4ECkvlQ4PcvNzkX09OsUMIw94Sv8JnWlhwMpEvoARBJ9J7rXhg;path=/;domain=.youtube.com; ",
          expiresAt: 1630383042789,
        }
      },
    },
  }
}

const buildEMYWMeta = (provider) => {
  if (!state.providers[provider]) state.providers[provider] = initState(true).providers[provider];
  const metaData = {
    apiKey: EMYW_PROXY_API_KEY,
    provider,
    enjoyDeviceId: localStorage.getItem('emwy-deviceid'),
    adConfigJson: JSON.stringify({ includeEnjoyAds: true }), // testing enjoy ads
    tokens: state.providers[provider].tokens,
    licenseUrl: state.providers[provider].licenseUrl,
    drmSession: state.providers[provider].drmSession
  };
  return metaData;
};

const proxyThroughBackground = (proxyRequest) => {
  return new Promise((resolve) => {
    chrome.runtime.sendMessage('bebnhildgpjjkldddapclelgaapgfjmj', { action: 'proxyRequest', proxyRequest }, (res) => {
      console.log(res);
      resolve(res);
    })
  });
};

const initPlayer = async () => {
  // Create a Player instance.
  const video = document.getElementById('video');
  const player = new shaka.Player(video);

  window.adManager = player.getAdManager();
  // const ui = video['ui'];
  // If you're using a non-UI build, this is the div you'll need to create
  // for your layout.  The ad manager will clear this div, when it unloads, so
  // don't pass in a div that contains non-ad elements.
  const container = document.getElementById('adsContainer');
  window.adManager.initClientSide(container, video);
  // Attach player to the window to make it easy to access in the JS console.
  window.player = player;

  // Listen for error events.
  player.addEventListener('error', onErrorEvent);

  // set some player defaults
  player.configure({
    preferredAudioLanguage: 'en',
  });

  // const fetchOrig = fetch;
  // fetch = (args) => {
  //   fetchOrig(args);
  // };
  // const fetchOrig = fetch;

  // shaka.net.NetworkingEngine.registerScheme('https', (uri, request, requestType, progressUpdated, headersReceived) => {
  //   console.log('hey', uri);
  //   // shaka.net.HttpFetchPlugin.parse(uri, request, requestType, progressUpdated, headersReceived);
  //   const headers = new shaka.net.HttpFetchPlugin.Headers_();
  //   shaka.util.MapUtils.asMap(request.headers).forEach((value, key) => {
  //     headers.append(key, value);
  //   });
  //   const init = {
  //     // Edge does not treat null as undefined for body; https://bit.ly/2luyE6x
  //     body: request.body || undefined,
  //     headers: headers,
  //     method: request.method,
  //     signal: controller.signal,
  //     credentials: request.allowCrossSiteCredentials ? 'include' : undefined,
  //   };
  //   fetch(uri, init)
  // }, shaka.net.NetworkingEngine.PluginPriority.PREFERRED, /* progressSupport= */ false);
  //   const fetchOrig = shaka.net.HttpFetchPlugin.fetch_;

  //   const request_ = async (uri, requestType, init, abortStatus, progressUpdated,
  //     headersReceived, streamDataCallback) => {
  //   const fetch = shaka.net.HttpFetchPlugin.fetch_;
  //   // const ReadableStream = shaka.net.HttpFetchPlugin.ReadableStream_;
  //   // let response;
  //   // let arrayBuffer;
  //   // let loaded = 0;
  //   // let lastLoaded = 0;

  //   // // Last time stamp when we got a progress event.
  //   // let lastTime = Date.now();

  //   try {
  //     // The promise returned by fetch resolves as soon as the HTTP response
  //     // headers are available. The download itself isn't done until the promise
  //     // for retrieving the data (arrayBuffer, blob, etc) has resolved.
  //     response = await fetch(uri, init);
  //     // At this point in the process, we have the headers of the response, but
  //     // not the body yet.
  //     headersReceived(shaka.net.HttpFetchPlugin.headersToGenericObject_(
  //         response.headers));
  //     // Getting the reader in this way allows us to observe the process of
  //     // downloading the body, instead of just waiting for an opaque promise to
  //     // resolve.
  //     // We first clone the response because calling getReader locks the body
  //     // stream; if we didn't clone it here, we would be unable to get the
  //     // response's arrayBuffer later.
  //     const reader = response.clone().body.getReader();

  //     const contentLengthRaw = response.headers.get('Content-Length');
  //     const contentLength =
  //         contentLengthRaw ? parseInt(contentLengthRaw, 10) : 0;

  //     const start = (controller) => {
  //       const push = async () => {
  //         let readObj;
  //         try {
  //           readObj = await reader.read();
  //         } catch (e) {
  //           // If we abort the request, we'll get an error here.  Just ignore it
  //           // since real errors will be reported when we read the buffer below.
  //           shaka.log.v1('error reading from stream', e.message);
  //           return;
  //         }

  //         if (!readObj.done) {
  //           loaded += readObj.value.byteLength;
  //           if (streamDataCallback) {
  //             await streamDataCallback(readObj.value);
  //           }
  //         }

  //         const currentTime = Date.now();
  //         // If the time between last time and this time we got progress event
  //         // is long enough, or if a whole segment is downloaded, call
  //         // progressUpdated().
  //         if (currentTime - lastTime > 100 || readObj.done) {
  //           progressUpdated(currentTime - lastTime, loaded - lastLoaded,
  //               contentLength - loaded);
  //           lastLoaded = loaded;
  //           lastTime = currentTime;
  //         }

  //         if (readObj.done) {
  //           goog.asserts.assert(!readObj.value,
  //               'readObj should be unset when "done" is true.');
  //           controller.close();
  //         } else {
  //           controller.enqueue(readObj.value);
  //           push();
  //         }
  //       };
  //       push();
  //     };
  //     // Create a ReadableStream to use the reader. We don't need to use the
  //     // actual stream for anything, though, as we are using the response's
  //     // arrayBuffer method to get the body, so we don't store the
  //     // ReadableStream.
  //     new ReadableStream({start}); // eslint-disable-line no-new
  //     arrayBuffer = await response.arrayBuffer();
  //   } catch (error) {
  //     if (abortStatus.canceled) {
  //       throw new shaka.util.Error(
  //           shaka.util.Error.Severity.RECOVERABLE,
  //           shaka.util.Error.Category.NETWORK,
  //           shaka.util.Error.Code.OPERATION_ABORTED,
  //           uri, requestType);
  //     } else if (abortStatus.timedOut) {
  //       throw new shaka.util.Error(
  //           shaka.util.Error.Severity.RECOVERABLE,
  //           shaka.util.Error.Category.NETWORK,
  //           shaka.util.Error.Code.TIMEOUT,
  //           uri, requestType);
  //     } else {
  //       throw new shaka.util.Error(
  //           shaka.util.Error.Severity.RECOVERABLE,
  //           shaka.util.Error.Category.NETWORK,
  //           shaka.util.Error.Code.HTTP_ERROR,
  //           uri, error, requestType);
  //     }
  //   }

  //   const headers = shaka.net.HttpFetchPlugin.headersToGenericObject_(
  //       response.headers);

  //   return shaka.net.HttpPluginUtils.makeResponse(
  //       headers, arrayBuffer, response.status, uri, response.url, requestType);
  // }

  const proxyThroughClientScript = async (clientFrame, url, options) => {
    return await new Promise((resolve) => {
      const payload = { id: "123", url, options };
      const receiveMessage = (event) => {
        // console.log(event.data);
        // const decoder = new TextDecoder("utf-8");
        // const view = new DataView(event.data.res || event.data.data, 0, (event.data.res || event.data.data).byteLength);
        // const string = decoder.decode(view);
        if (event.data && event.data.buffer) {
          const body = String.fromCharCode.apply(null, new Uint8Array(event.data.buffer));
          // console.log(body);
          resolve({
            status: event.data.response.status,
            headers: event.data.response.headers,
            body: event.data.buffer
          });
        }
      };

      window.removeEventListener('message', receiveMessage, false);
      window.addEventListener('message', receiveMessage, false);

      clientFrame.contentWindow.postMessage({ type: 'PROXY_REQUEST', payload, origin: window.location.href }, new URL('https://www.youtube.com').origin);
    });
  }


  // We send the emyw-meta to the proxy server for processing
  player.getNetworkingEngine().registerRequestFilter((type, request) => {
    // RequestType = {
    //   'MANIFEST': 0,
    //   'SEGMENT': 1,
    //   'LICENSE': 2,
    //   'APP': 3,
    //   'TIMING': 4,
    //   'SERVER_CERTIFICATE': 5,
    // };

    // Only add headers to license requests:
    // console.log('there is a request type', type);
    // if (type == shaka.net.NetworkingEngine.RequestType.MANIFEST) {
    //   console.log('there was a manifest request', request.uris);
    // } else
    if (type == shaka.net.NetworkingEngine.RequestType.SEGMENT) {
      // Note that once there were some CORS errors that were cached. Disabling cache in the network tab of devtools resolve it.
      // We can't add the cache-control header due to CORS. Consider clearing the Cache for sites that cause this cache poisoning
      // Another approach is to cache-bust by adding something to the path as below
      if (state.currentProvider === "DISNEYPLUS" && request.uris && request.uris.length > 0) request.uris[0] += `?vary=${generateDeviceId(6)}`;
      if (state.currentProvider === "YOUTUBE") {
        // console.log('getting a segment');
        shaka.net.HttpFetchPlugin.request_ = async (uri, requestType, options, abortStatus, progressUpdated, headersReceived, streamDataCallback) => {
          let lastTime = Date.now();
          let range = "";
          ({ Range: range } = request.headers);
          range = (range.split('=') || ['', '0-1780'])[1];
          uri += `&range=${range}`;
          // perform the fetch through the content script in iframe
          delete options.signal;
          proxyRequest = { url: uri, options };
          options.headers = shaka.net.HttpFetchPlugin.headersToGenericObject_(options.headers);
          console.log(proxyRequest);

          const clientFrame = document.getElementById('yt-proxy-frame');
          proxiedRes = await proxyThroughClientScript(clientFrame, uri, options);
          if (proxiedRes.headers.map) {
            proxiedRes.headers = new Map(proxiedRes.headers.map(entry => {
              return [entry[0], entry[1]];
            }));
          }
          headersReceived(shaka.net.HttpFetchPlugin.headersToGenericObject_(proxiedRes.headers))
          const currentTime = Date.now();
          progressUpdated(currentTime - lastTime, 0, 0);
          console.log(proxiedRes);
          return shaka.net.HttpPluginUtils.makeResponse(proxiedRes.headers, proxiedRes.body, proxiedRes.status, uri, uri, requestType);
        };
      }
      // console.log('there was a segment request', request);
    } else if (type == shaka.net.NetworkingEngine.RequestType.LICENSE) {
      if (state.providers[state.currentProvider].drmSession) state.providers[state.currentProvider].drmSession.sessionId = request.sessionId;
      const emywMeta = buildEMYWMeta(state.currentProvider);
      emywMeta.videoId = state.currentVideoId;
      if (state.currentProvider === "NETFLIX") {
        emywMeta.supportsClientProxy = true;
        // tell the server to await a license request
        fetch(`${awaitPath}/${state.providers[state.currentProvider].manifestPath}`, { method: 'GET' }).then(async (res) => {
          // client proxy the request then send the response back to the proxy
          const body = await res.text();
          const jsonRes = JSON.parse(body);
          const { request } = jsonRes;
          const { url, options } = request;
          const payload = decodeURIComponent(options.body);
          proxyRequest = { url, options: Object.assign(options, { body: payload }) };
          proxiedRes = await proxyThroughBackground(proxyRequest);
          // send the response back to the proxy-api
          fetch(`${processPath}/${state.providers[state.currentProvider].manifestPath}`, { method: 'POST', body: encodeURIComponent(proxiedRes.body) });
        });
      }
      request.headers = Object.assign(request.headers, buildEMYWHeader(emywMeta));
    }
  });

  var pausedByBuffering = false;

  // Netflix and Hulu video stalls/freezes a lot where there are buffer underruns for some reason.
  // Issue was described here noticed on Chrome only: https://github.com/google/shaka-player/issues/438
  // Below workaround seems to work.
  setInterval(() => {
    if (video.buffered.length > 0) {
      var buffered = video.buffered.end(video.buffered.length - 1) - video.currentTime;
      var remainingTime = video.duration - video.currentTime;

      if (!video.paused && buffered < 0.5) {
        console.log("video buffer ran out");
        pausedByBuffering = true;
        video.pause();
      } else if (pausedByBuffering && buffered >= Math.min(remainingTime, 5)) {
        console.log("video has buffered enough to continue...", Math.min(remainingTime, 5));
        pausedByBuffering = false;
        video.play();
      }
    }
  }, 17); // ~60fps
}

const onErrorEvent = (event) => {
  // Extract the shaka.util.Error object from the event.
  onError(event.detail);
}

const onError = (error) => {
  // Log the error.
  console.error('Error code', error.code, 'object', error);
  if (state.attemptRegenerateIfFail) {
    console.warn('Attempting to forceregenerate manifest...');
    handlePlay(state.currentProvider, state.currentVideoId, true);
  }
}

document.addEventListener('DOMContentLoaded', initApp);

const buildEMYWHeader = (emywMetaJson) => {
  const emywMeta = aesEncrypt(JSON.stringify(emywMetaJson))
  console.log((new TextEncoder().encode(emywMeta)).length);
  const headers = { 'emyw-meta': emywMeta };
  return headers;
}

const initAds = (vmap) => {
  const adsRequest = new google.ima.AdsRequest();
  // adsRequest.adTagUrl = 'https://a3006b083389.ngrok.io/sample-vmap.xml';
  adsRequest.adsResponse = vmap;
  window.adManager.requestClientSideAds(adsRequest);
}

// const updateAuthSession = async (provider) => {
//   const resAuth = await fetch(sessionPath, { method: 'POST', headers: buildEMYWHeader(buildEMYWMeta(state.currentProvider)) });
//   const bodyText = await resAuth.text();
//   state.providers[provider].tokens = JSON.parse(atob(aesDecrypt(bodyText)));
//   localStorage.setItem('test-shaka-state', JSON.stringify(state));
//   console.log(state);
// };

const requestManifest = async (provider, videoId, regenerateManifest) => {
  const emywMeta = buildEMYWMeta(provider);
  emywMeta.videoId = videoId;
  emywMeta.includeFullManifestText = true;
  // emywMeta.forceRegenerate = true;
  if (provider === "NETFLIX") emywMeta.supportsClientProxy = true;
  // emywMeta.forceRegenerate = regenerateManifest;
  let manifestObject;
  let lastCode;
  let proxiedRes;
  let proxyRequest;
  let proxiedResponseBody = null;
  while (true) {
    if (proxiedRes) {
      proxiedResponseBody = { proxiedResponse: { response: proxiedRes.body, code: proxyRequest.code, state: proxyRequest.state } };
    }
    const res = await fetch(manifestPath, {
      method: 'POST',
      headers: buildEMYWHeader(emywMeta),
      body: proxiedResponseBody ? JSON.stringify(proxiedResponseBody) : "",
    });
    proxiedResponseBody = null;
    const bodyText = await res.text();
    const jsonRes = JSON.parse(aesDecrypt(bodyText));
    ({ proxyRequest } = jsonRes);
    if (proxyRequest) {
      if (lastCode === proxyRequest.code) {
        console.log('caught repeating ourself. aborting.');
        break;
      }
      lastCode = proxyRequest.code;
      const { request } = proxyRequest;
      proxiedRes = await proxyThroughBackground(request);
    } else {
      manifestObject = jsonRes;
      break;
    }
  }
  // const resManifest = await fetch(manifestPath, { method: 'POST', headers: buildEMYWHeader(emywMeta) });
  // const bodyText = await resManifest.text();
  // const manifestObject = JSON.parse(aesDecrypt(bodyText));
  console.log(manifestObject);
  return manifestObject;
};

const requestTags = async () => {
  const provider = state.currentProvider;
  const emywMeta = buildEMYWMeta(provider);
  emywMeta.videoId = state.currentVideoId;
  emywMeta.subtitle = state.providers[provider].subtitles[0]; // assume english is the only entry at this point
  const resTags = await fetch(tagsPath, { method: 'GET', headers: buildEMYWHeader(emywMeta) });
  const tags = await resTags.json();
  return tags;
};

const handlePlay = async (provider, videoId, regenerateManifest) => {
  console.log('Play event');
  // Try to load a manifest.
  try {
    state.currentProvider = provider;
    state.currentVideoId = videoId;
    state.attemptRegenerateIfFail = !regenerateManifest;
    // Tell the proxy server to prepare the manifest
    const enjoyManifestObject = await requestManifest(provider, videoId, regenerateManifest);
    if (enjoyManifestObject.failMessage) throw new Error(enjoyManifestObject.failMessage);
    const manifestUrl = `${manifestPath}/${enjoyManifestObject.manifestUrlKey}`;

    state.providers[provider].tokens = enjoyManifestObject.tokens; // update incase they were refreshed
    state.providers[provider].licenseUrl = enjoyManifestObject.licenseUrl;
    state.providers[provider].drmSession = enjoyManifestObject.drmSession;
    state.providers[provider].subtitles = enjoyManifestObject.subtitles;
    const requestKey = generateDeviceId(10); // generate some unique thing as a requestKey
    state.providers[provider].manifestPath = `${enjoyManifestObject.manifestUrlKey}?p=${requestKey}`;

    // Now that we have the manifest and subtitles, initiate enjoy tag loading...
    requestTags().then((tags) => {
      console.log(tags);
    })

    // state.providers[provider].vmap = enjoyManifestObject.vmapXml;
    if (enjoyManifestObject.vmapXml) initAds(enjoyManifestObject.vmapXml);

    const NETFLIX_SERVER_CERT = "Cr0CCAMSEOVEukALwQ8307Y2+LVP+0MYh/HPkwUijgIwggEKAoIBAQDm875btoWUbGqQD8eAGuBlGY+Pxo8YF1LQR+Ex0pDONMet8EHslcZRBKNQ/09RZFTP0vrYimyYiBmk9GG+S0wB3CRITgweNE15cD33MQYyS3zpBd4z+sCJam2+jj1ZA4uijE2dxGC+gRBRnw9WoPyw7D8RuhGSJ95OEtzg3Ho+mEsxuE5xg9LM4+Zuro/9msz2bFgJUjQUVHo5j+k4qLWu4ObugFmc9DLIAohL58UR5k0XnvizulOHbMMxdzna9lwTw/4SALadEV/CZXBmswUtBgATDKNqjXwokohncpdsWSauH6vfS6FXwizQoZJ9TdjSGC60rUB2t+aYDm74cIuxAgMBAAE6EHRlc3QubmV0ZmxpeC5jb20SgAOE0y8yWw2Win6M2/bw7+aqVuQPwzS/YG5ySYvwCGQd0Dltr3hpik98WijUODUr6PxMn1ZYXOLo3eED6xYGM7Riza8XskRdCfF8xjj7L7/THPbixyn4mULsttSmWFhexzXnSeKqQHuoKmerqu0nu39iW3pcxDV/K7E6aaSr5ID0SCi7KRcL9BCUCz1g9c43sNj46BhMCWJSm0mx1XFDcoKZWhpj5FAgU4Q4e6f+S8eX39nf6D6SJRb4ap7Znzn7preIvmS93xWjm75I6UBVQGo6pn4qWNCgLYlGGCQCUm5tg566j+/g5jvYZkTJvbiZFwtjMW5njbSRwB3W4CrKoyxw4qsJNSaZRTKAvSjTKdqVDXV/U5HK7SaBA6iJ981/aforXbd2vZlRXO/2S+Maa2mHULzsD+S5l4/YGpSt7PnkCe25F+nAovtl/ogZgjMeEdFyd/9YMYjOS4krYmwp3yJ7m9ZzYCQ6I8RQN4x/yLlHG5RH/+WNLNUs6JAZ0fFdCmw=";

    player.configure({
      drm: {
        servers: {
          'com.widevine.alpha': `${licensePath}/${state.providers[provider].manifestPath}`,
          'com.microsoft.playready': `${licensePath}/${state.providers[provider].manifestPath}`,
        },
        advanced: {
          'com.widevine.alpha': {
            serverCertificate: provider === "NETFLIX" ? Uint8Array.from(window.atob(NETFLIX_SERVER_CERT), c => c.charCodeAt(0)) : new Uint8Array(0)
          }
        },
      },
      // streaming: { // Not sure what this does actually
      //   stallEnabled: true 
      // }
    });

    if (enjoyManifestObject.manifest) {
      console.log('loading manifest after POST');
      const mimeType = enjoyManifestObject.manifest.indexOf('#EXTM3U') > -1 ? 'x-mpegurl' : 'dash+xml'
      await player.load(`data:application/${mimeType};base64,${window.btoa(enjoyManifestObject.manifest)}`);
    } else {
      // This option mainly here for Roku which requires a URL to get
      console.log('loading manifest with GET');
      await player.load(manifestUrl);
    }
    // This runs if the asynchronous load is successful.
    console.log('The video has now been loaded!');
  } catch (e) {
    // onError is executed if the asynchronous load fails.
    onError(e);
  }
}
